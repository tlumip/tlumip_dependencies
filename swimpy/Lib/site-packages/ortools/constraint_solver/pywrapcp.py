# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pywrapcp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pywrapcp')
    _pywrapcp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pywrapcp', [dirname(__file__)])
        except ImportError:
            import _pywrapcp
            return _pywrapcp
        try:
            _mod = imp.load_module('_pywrapcp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pywrapcp = swig_import_helper()
    del swig_import_helper
else:
    import _pywrapcp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class DefaultPhaseParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DefaultPhaseParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DefaultPhaseParameters, name)
    __repr__ = _swig_repr
    CHOOSE_MAX_SUM_IMPACT = _pywrapcp.DefaultPhaseParameters_CHOOSE_MAX_SUM_IMPACT
    CHOOSE_MAX_AVERAGE_IMPACT = _pywrapcp.DefaultPhaseParameters_CHOOSE_MAX_AVERAGE_IMPACT
    CHOOSE_MAX_VALUE_IMPACT = _pywrapcp.DefaultPhaseParameters_CHOOSE_MAX_VALUE_IMPACT
    SELECT_MIN_IMPACT = _pywrapcp.DefaultPhaseParameters_SELECT_MIN_IMPACT
    SELECT_MAX_IMPACT = _pywrapcp.DefaultPhaseParameters_SELECT_MAX_IMPACT
    NONE = _pywrapcp.DefaultPhaseParameters_NONE
    NORMAL = _pywrapcp.DefaultPhaseParameters_NORMAL
    VERBOSE = _pywrapcp.DefaultPhaseParameters_VERBOSE
    __swig_setmethods__["var_selection_schema"] = _pywrapcp.DefaultPhaseParameters_var_selection_schema_set
    __swig_getmethods__["var_selection_schema"] = _pywrapcp.DefaultPhaseParameters_var_selection_schema_get
    if _newclass:
        var_selection_schema = _swig_property(_pywrapcp.DefaultPhaseParameters_var_selection_schema_get, _pywrapcp.DefaultPhaseParameters_var_selection_schema_set)
    __swig_setmethods__["value_selection_schema"] = _pywrapcp.DefaultPhaseParameters_value_selection_schema_set
    __swig_getmethods__["value_selection_schema"] = _pywrapcp.DefaultPhaseParameters_value_selection_schema_get
    if _newclass:
        value_selection_schema = _swig_property(_pywrapcp.DefaultPhaseParameters_value_selection_schema_get, _pywrapcp.DefaultPhaseParameters_value_selection_schema_set)
    __swig_setmethods__["initialization_splits"] = _pywrapcp.DefaultPhaseParameters_initialization_splits_set
    __swig_getmethods__["initialization_splits"] = _pywrapcp.DefaultPhaseParameters_initialization_splits_get
    if _newclass:
        initialization_splits = _swig_property(_pywrapcp.DefaultPhaseParameters_initialization_splits_get, _pywrapcp.DefaultPhaseParameters_initialization_splits_set)
    __swig_setmethods__["run_all_heuristics"] = _pywrapcp.DefaultPhaseParameters_run_all_heuristics_set
    __swig_getmethods__["run_all_heuristics"] = _pywrapcp.DefaultPhaseParameters_run_all_heuristics_get
    if _newclass:
        run_all_heuristics = _swig_property(_pywrapcp.DefaultPhaseParameters_run_all_heuristics_get, _pywrapcp.DefaultPhaseParameters_run_all_heuristics_set)
    __swig_setmethods__["heuristic_period"] = _pywrapcp.DefaultPhaseParameters_heuristic_period_set
    __swig_getmethods__["heuristic_period"] = _pywrapcp.DefaultPhaseParameters_heuristic_period_get
    if _newclass:
        heuristic_period = _swig_property(_pywrapcp.DefaultPhaseParameters_heuristic_period_get, _pywrapcp.DefaultPhaseParameters_heuristic_period_set)
    __swig_setmethods__["heuristic_num_failures_limit"] = _pywrapcp.DefaultPhaseParameters_heuristic_num_failures_limit_set
    __swig_getmethods__["heuristic_num_failures_limit"] = _pywrapcp.DefaultPhaseParameters_heuristic_num_failures_limit_get
    if _newclass:
        heuristic_num_failures_limit = _swig_property(_pywrapcp.DefaultPhaseParameters_heuristic_num_failures_limit_get, _pywrapcp.DefaultPhaseParameters_heuristic_num_failures_limit_set)
    __swig_setmethods__["persistent_impact"] = _pywrapcp.DefaultPhaseParameters_persistent_impact_set
    __swig_getmethods__["persistent_impact"] = _pywrapcp.DefaultPhaseParameters_persistent_impact_get
    if _newclass:
        persistent_impact = _swig_property(_pywrapcp.DefaultPhaseParameters_persistent_impact_get, _pywrapcp.DefaultPhaseParameters_persistent_impact_set)
    __swig_setmethods__["random_seed"] = _pywrapcp.DefaultPhaseParameters_random_seed_set
    __swig_getmethods__["random_seed"] = _pywrapcp.DefaultPhaseParameters_random_seed_get
    if _newclass:
        random_seed = _swig_property(_pywrapcp.DefaultPhaseParameters_random_seed_get, _pywrapcp.DefaultPhaseParameters_random_seed_set)
    __swig_setmethods__["display_level"] = _pywrapcp.DefaultPhaseParameters_display_level_set
    __swig_getmethods__["display_level"] = _pywrapcp.DefaultPhaseParameters_display_level_get
    if _newclass:
        display_level = _swig_property(_pywrapcp.DefaultPhaseParameters_display_level_get, _pywrapcp.DefaultPhaseParameters_display_level_set)
    __swig_setmethods__["decision_builder"] = _pywrapcp.DefaultPhaseParameters_decision_builder_set
    __swig_getmethods__["decision_builder"] = _pywrapcp.DefaultPhaseParameters_decision_builder_get
    if _newclass:
        decision_builder = _swig_property(_pywrapcp.DefaultPhaseParameters_decision_builder_get, _pywrapcp.DefaultPhaseParameters_decision_builder_set)

    def __init__(self):
        this = _pywrapcp.new_DefaultPhaseParameters()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_DefaultPhaseParameters
    __del__ = lambda self: None
DefaultPhaseParameters_swigregister = _pywrapcp.DefaultPhaseParameters_swigregister
DefaultPhaseParameters_swigregister(DefaultPhaseParameters)

class Solver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Solver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Solver, name)
    __repr__ = _swig_repr
    INT_VAR_DEFAULT = _pywrapcp.Solver_INT_VAR_DEFAULT
    INT_VAR_SIMPLE = _pywrapcp.Solver_INT_VAR_SIMPLE
    CHOOSE_FIRST_UNBOUND = _pywrapcp.Solver_CHOOSE_FIRST_UNBOUND
    CHOOSE_RANDOM = _pywrapcp.Solver_CHOOSE_RANDOM
    CHOOSE_MIN_SIZE_LOWEST_MIN = _pywrapcp.Solver_CHOOSE_MIN_SIZE_LOWEST_MIN
    CHOOSE_MIN_SIZE_HIGHEST_MIN = _pywrapcp.Solver_CHOOSE_MIN_SIZE_HIGHEST_MIN
    CHOOSE_MIN_SIZE_LOWEST_MAX = _pywrapcp.Solver_CHOOSE_MIN_SIZE_LOWEST_MAX
    CHOOSE_MIN_SIZE_HIGHEST_MAX = _pywrapcp.Solver_CHOOSE_MIN_SIZE_HIGHEST_MAX
    CHOOSE_LOWEST_MIN = _pywrapcp.Solver_CHOOSE_LOWEST_MIN
    CHOOSE_HIGHEST_MAX = _pywrapcp.Solver_CHOOSE_HIGHEST_MAX
    CHOOSE_MIN_SIZE = _pywrapcp.Solver_CHOOSE_MIN_SIZE
    CHOOSE_MAX_SIZE = _pywrapcp.Solver_CHOOSE_MAX_SIZE
    CHOOSE_MAX_REGRET_ON_MIN = _pywrapcp.Solver_CHOOSE_MAX_REGRET_ON_MIN
    CHOOSE_PATH = _pywrapcp.Solver_CHOOSE_PATH
    INT_VALUE_DEFAULT = _pywrapcp.Solver_INT_VALUE_DEFAULT
    INT_VALUE_SIMPLE = _pywrapcp.Solver_INT_VALUE_SIMPLE
    ASSIGN_MIN_VALUE = _pywrapcp.Solver_ASSIGN_MIN_VALUE
    ASSIGN_MAX_VALUE = _pywrapcp.Solver_ASSIGN_MAX_VALUE
    ASSIGN_RANDOM_VALUE = _pywrapcp.Solver_ASSIGN_RANDOM_VALUE
    ASSIGN_CENTER_VALUE = _pywrapcp.Solver_ASSIGN_CENTER_VALUE
    SPLIT_LOWER_HALF = _pywrapcp.Solver_SPLIT_LOWER_HALF
    SPLIT_UPPER_HALF = _pywrapcp.Solver_SPLIT_UPPER_HALF
    SEQUENCE_DEFAULT = _pywrapcp.Solver_SEQUENCE_DEFAULT
    SEQUENCE_SIMPLE = _pywrapcp.Solver_SEQUENCE_SIMPLE
    CHOOSE_MIN_SLACK_RANK_FORWARD = _pywrapcp.Solver_CHOOSE_MIN_SLACK_RANK_FORWARD
    CHOOSE_RANDOM_RANK_FORWARD = _pywrapcp.Solver_CHOOSE_RANDOM_RANK_FORWARD
    INTERVAL_DEFAULT = _pywrapcp.Solver_INTERVAL_DEFAULT
    INTERVAL_SIMPLE = _pywrapcp.Solver_INTERVAL_SIMPLE
    INTERVAL_SET_TIMES_FORWARD = _pywrapcp.Solver_INTERVAL_SET_TIMES_FORWARD
    INTERVAL_SET_TIMES_BACKWARD = _pywrapcp.Solver_INTERVAL_SET_TIMES_BACKWARD
    TWOOPT = _pywrapcp.Solver_TWOOPT
    OROPT = _pywrapcp.Solver_OROPT
    RELOCATE = _pywrapcp.Solver_RELOCATE
    EXCHANGE = _pywrapcp.Solver_EXCHANGE
    CROSS = _pywrapcp.Solver_CROSS
    MAKEACTIVE = _pywrapcp.Solver_MAKEACTIVE
    MAKEINACTIVE = _pywrapcp.Solver_MAKEINACTIVE
    MAKECHAININACTIVE = _pywrapcp.Solver_MAKECHAININACTIVE
    SWAPACTIVE = _pywrapcp.Solver_SWAPACTIVE
    EXTENDEDSWAPACTIVE = _pywrapcp.Solver_EXTENDEDSWAPACTIVE
    PATHLNS = _pywrapcp.Solver_PATHLNS
    FULLPATHLNS = _pywrapcp.Solver_FULLPATHLNS
    UNACTIVELNS = _pywrapcp.Solver_UNACTIVELNS
    INCREMENT = _pywrapcp.Solver_INCREMENT
    DECREMENT = _pywrapcp.Solver_DECREMENT
    SIMPLELNS = _pywrapcp.Solver_SIMPLELNS
    GE = _pywrapcp.Solver_GE
    LE = _pywrapcp.Solver_LE
    EQ = _pywrapcp.Solver_EQ
    DELAYED_PRIORITY = _pywrapcp.Solver_DELAYED_PRIORITY
    VAR_PRIORITY = _pywrapcp.Solver_VAR_PRIORITY
    NORMAL_PRIORITY = _pywrapcp.Solver_NORMAL_PRIORITY

    def __init__(self, *args):
        this = _pywrapcp.new_Solver(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

        self.__python_constraints = []



    __swig_destroy__ = _pywrapcp.delete_Solver
    __del__ = lambda self: None

    def Parameters(self):
        return _pywrapcp.Solver_Parameters(self)
    if _newclass:
        DefaultSolverParameters = staticmethod(_pywrapcp.Solver_DefaultSolverParameters)
    else:
        DefaultSolverParameters = _pywrapcp.Solver_DefaultSolverParameters

    def AddConstraint(self, c):
        return _pywrapcp.Solver_AddConstraint(self, c)

    def Solve(self, *args):
        return _pywrapcp.Solver_Solve(self, *args)

    def NewSearch(self, *args):
        return _pywrapcp.Solver_NewSearch(self, *args)

    def NextSolution(self):
        return _pywrapcp.Solver_NextSolution(self)

    def RestartSearch(self):
        return _pywrapcp.Solver_RestartSearch(self)

    def EndSearch(self):
        return _pywrapcp.Solver_EndSearch(self)

    def SolveAndCommit(self, *args):
        return _pywrapcp.Solver_SolveAndCommit(self, *args)

    def CheckAssignment(self, solution):
        return _pywrapcp.Solver_CheckAssignment(self, solution)

    def CheckConstraint(self, ct):
        return _pywrapcp.Solver_CheckConstraint(self, ct)

    def Fail(self):
        return _pywrapcp.Solver_Fail(self)
    if _newclass:
        MemoryUsage = staticmethod(_pywrapcp.Solver_MemoryUsage)
    else:
        MemoryUsage = _pywrapcp.Solver_MemoryUsage

    def WallTime(self):
        return _pywrapcp.Solver_WallTime(self)

    def Branches(self):
        return _pywrapcp.Solver_Branches(self)

    def Solutions(self):
        return _pywrapcp.Solver_Solutions(self)

    def Failures(self):
        return _pywrapcp.Solver_Failures(self)

    def AcceptedNeighbors(self):
        return _pywrapcp.Solver_AcceptedNeighbors(self)

    def Stamp(self):
        return _pywrapcp.Solver_Stamp(self)

    def FailStamp(self):
        return _pywrapcp.Solver_FailStamp(self)

    def IntVar(self, *args):
        return _pywrapcp.Solver_IntVar(self, *args)

    def BoolVar(self, *args):
        return _pywrapcp.Solver_BoolVar(self, *args)

    def IntConst(self, *args):
        return _pywrapcp.Solver_IntConst(self, *args)

    def Sum(self, vars):
        return _pywrapcp.Solver_Sum(self, vars)

    def ScalProd(self, *args):
        return _pywrapcp.Solver_ScalProd(self, *args)

    def MonotonicElement(self, values, increasing, index):
        return _pywrapcp.Solver_MonotonicElement(self, values, increasing, index)

    def Element(self, *args):
        return _pywrapcp.Solver_Element(self, *args)

    def IndexExpression(self, vars, value):
        return _pywrapcp.Solver_IndexExpression(self, vars, value)

    def Min(self, *args):
        return _pywrapcp.Solver_Min(self, *args)

    def Max(self, *args):
        return _pywrapcp.Solver_Max(self, *args)

    def ConvexPiecewiseExpr(self, expr, early_cost, early_date, late_date, late_cost):
        return _pywrapcp.Solver_ConvexPiecewiseExpr(self, expr, early_cost, early_date, late_date, late_cost)

    def SemiContinuousExpr(self, expr, fixed_charge, step):
        return _pywrapcp.Solver_SemiContinuousExpr(self, expr, fixed_charge, step)

    def ConditionalExpression(self, condition, expr, unperformed_value):
        return _pywrapcp.Solver_ConditionalExpression(self, condition, expr, unperformed_value)

    def TrueConstraint(self):
        return _pywrapcp.Solver_TrueConstraint(self)

    def FalseConstraint(self, *args):
        return _pywrapcp.Solver_FalseConstraint(self, *args)

    def IsEqualCstCt(self, var, value, boolvar):
        return _pywrapcp.Solver_IsEqualCstCt(self, var, value, boolvar)

    def IsEqualCstVar(self, var, value):
        return _pywrapcp.Solver_IsEqualCstVar(self, var, value)

    def IsEqualCt(self, v1, v2, b):
        return _pywrapcp.Solver_IsEqualCt(self, v1, v2, b)

    def IsEqualVar(self, v1, v2):
        return _pywrapcp.Solver_IsEqualVar(self, v1, v2)

    def IsDifferentCstCt(self, var, value, boolvar):
        return _pywrapcp.Solver_IsDifferentCstCt(self, var, value, boolvar)

    def IsDifferentCstVar(self, var, value):
        return _pywrapcp.Solver_IsDifferentCstVar(self, var, value)

    def IsDifferentVar(self, v1, v2):
        return _pywrapcp.Solver_IsDifferentVar(self, v1, v2)

    def IsDifferentCt(self, v1, v2, b):
        return _pywrapcp.Solver_IsDifferentCt(self, v1, v2, b)

    def IsLessOrEqualCstCt(self, var, value, boolvar):
        return _pywrapcp.Solver_IsLessOrEqualCstCt(self, var, value, boolvar)

    def IsLessOrEqualCstVar(self, var, value):
        return _pywrapcp.Solver_IsLessOrEqualCstVar(self, var, value)

    def IsLessOrEqualVar(self, left, right):
        return _pywrapcp.Solver_IsLessOrEqualVar(self, left, right)

    def IsLessOrEqualCt(self, left, right, b):
        return _pywrapcp.Solver_IsLessOrEqualCt(self, left, right, b)

    def IsGreaterOrEqualCstCt(self, var, value, boolvar):
        return _pywrapcp.Solver_IsGreaterOrEqualCstCt(self, var, value, boolvar)

    def IsGreaterOrEqualCstVar(self, var, value):
        return _pywrapcp.Solver_IsGreaterOrEqualCstVar(self, var, value)

    def IsGreaterOrEqualVar(self, left, right):
        return _pywrapcp.Solver_IsGreaterOrEqualVar(self, left, right)

    def IsGreaterOrEqualCt(self, left, right, b):
        return _pywrapcp.Solver_IsGreaterOrEqualCt(self, left, right, b)

    def IsGreaterCstCt(self, v, c, b):
        return _pywrapcp.Solver_IsGreaterCstCt(self, v, c, b)

    def IsGreaterCstVar(self, var, value):
        return _pywrapcp.Solver_IsGreaterCstVar(self, var, value)

    def IsGreaterVar(self, left, right):
        return _pywrapcp.Solver_IsGreaterVar(self, left, right)

    def IsGreaterCt(self, left, right, b):
        return _pywrapcp.Solver_IsGreaterCt(self, left, right, b)

    def IsLessCstCt(self, v, c, b):
        return _pywrapcp.Solver_IsLessCstCt(self, v, c, b)

    def IsLessCstVar(self, var, value):
        return _pywrapcp.Solver_IsLessCstVar(self, var, value)

    def IsLessVar(self, left, right):
        return _pywrapcp.Solver_IsLessVar(self, left, right)

    def IsLessCt(self, left, right, b):
        return _pywrapcp.Solver_IsLessCt(self, left, right, b)

    def SumLessOrEqual(self, vars, cst):
        return _pywrapcp.Solver_SumLessOrEqual(self, vars, cst)

    def SumGreaterOrEqual(self, vars, cst):
        return _pywrapcp.Solver_SumGreaterOrEqual(self, vars, cst)

    def SumEquality(self, *args):
        return _pywrapcp.Solver_SumEquality(self, *args)

    def ScalProdEquality(self, *args):
        return _pywrapcp.Solver_ScalProdEquality(self, *args)

    def ScalProdGreaterOrEqual(self, *args):
        return _pywrapcp.Solver_ScalProdGreaterOrEqual(self, *args)

    def ScalProdLessOrEqual(self, *args):
        return _pywrapcp.Solver_ScalProdLessOrEqual(self, *args)

    def MinEquality(self, vars, min_var):
        return _pywrapcp.Solver_MinEquality(self, vars, min_var)

    def MaxEquality(self, vars, max_var):
        return _pywrapcp.Solver_MaxEquality(self, vars, max_var)

    def ElementEquality(self, *args):
        return _pywrapcp.Solver_ElementEquality(self, *args)

    def AbsEquality(self, var, abs_var):
        return _pywrapcp.Solver_AbsEquality(self, var, abs_var)

    def IndexOfConstraint(self, vars, index, target):
        return _pywrapcp.Solver_IndexOfConstraint(self, vars, index, target)

    def ConstraintInitialPropagateCallback(self, ct):
        return _pywrapcp.Solver_ConstraintInitialPropagateCallback(self, ct)

    def DelayedConstraintInitialPropagateCallback(self, ct):
        return _pywrapcp.Solver_DelayedConstraintInitialPropagateCallback(self, ct)

    def ClosureDemon(self, closure):
        return _pywrapcp.Solver_ClosureDemon(self, closure)

    def BetweenCt(self, expr, l, u):
        return _pywrapcp.Solver_BetweenCt(self, expr, l, u)

    def IsBetweenCt(self, expr, l, u, b):
        return _pywrapcp.Solver_IsBetweenCt(self, expr, l, u, b)

    def IsBetweenVar(self, v, l, u):
        return _pywrapcp.Solver_IsBetweenVar(self, v, l, u)

    def MemberCt(self, *args):
        return _pywrapcp.Solver_MemberCt(self, *args)

    def NotMemberCt(self, *args):
        return _pywrapcp.Solver_NotMemberCt(self, *args)

    def IsMemberCt(self, *args):
        return _pywrapcp.Solver_IsMemberCt(self, *args)

    def IsMemberVar(self, *args):
        return _pywrapcp.Solver_IsMemberVar(self, *args)

    def Count(self, *args):
        return _pywrapcp.Solver_Count(self, *args)

    def Distribute(self, *args):
        return _pywrapcp.Solver_Distribute(self, *args)

    def Deviation(self, vars, deviation_var, total_sum):
        return _pywrapcp.Solver_Deviation(self, vars, deviation_var, total_sum)

    def AllDifferent(self, *args):
        return _pywrapcp.Solver_AllDifferent(self, *args)

    def AllDifferentExcept(self, vars, escape_value):
        return _pywrapcp.Solver_AllDifferentExcept(self, vars, escape_value)

    def SortingConstraint(self, vars, sorted):
        return _pywrapcp.Solver_SortingConstraint(self, vars, sorted)

    def LexicalLess(self, left, right):
        return _pywrapcp.Solver_LexicalLess(self, left, right)

    def LexicalLessOrEqual(self, left, right):
        return _pywrapcp.Solver_LexicalLessOrEqual(self, left, right)

    def InversePermutationConstraint(self, left, right):
        return _pywrapcp.Solver_InversePermutationConstraint(self, left, right)

    def NullIntersect(self, first_vars, second_vars):
        return _pywrapcp.Solver_NullIntersect(self, first_vars, second_vars)

    def NullIntersectExcept(self, first_vars, second_vars, escape_value):
        return _pywrapcp.Solver_NullIntersectExcept(self, first_vars, second_vars, escape_value)

    def Circuit(self, nexts):
        return _pywrapcp.Solver_Circuit(self, nexts)

    def SubCircuit(self, nexts):
        return _pywrapcp.Solver_SubCircuit(self, nexts)

    def DelayedPathCumul(self, nexts, active, cumuls, transits):
        return _pywrapcp.Solver_DelayedPathCumul(self, nexts, active, cumuls, transits)

    def PathCumul(self, *args):
        return _pywrapcp.Solver_PathCumul(self, *args)

    def AllowedAssignments(self, *args):
        return _pywrapcp.Solver_AllowedAssignments(self, *args)

    def TransitionConstraint(self, *args):
        return _pywrapcp.Solver_TransitionConstraint(self, *args)

    def NonOverlappingBoxesConstraint(self, *args):
        return _pywrapcp.Solver_NonOverlappingBoxesConstraint(self, *args)

    def Pack(self, vars, number_of_bins):
        return _pywrapcp.Solver_Pack(self, vars, number_of_bins)

    def FixedDurationIntervalVar(self, *args):
        return _pywrapcp.Solver_FixedDurationIntervalVar(self, *args)

    def FixedInterval(self, start, duration, name):
        return _pywrapcp.Solver_FixedInterval(self, start, duration, name)

    def IntervalVar(self, start_min, start_max, duration_min, duration_max, end_min, end_max, optional, name):
        return _pywrapcp.Solver_IntervalVar(self, start_min, start_max, duration_min, duration_max, end_min, end_max, optional, name)

    def MirrorInterval(self, interval_var):
        return _pywrapcp.Solver_MirrorInterval(self, interval_var)

    def FixedDurationStartSyncedOnStartIntervalVar(self, interval_var, duration, offset):
        return _pywrapcp.Solver_FixedDurationStartSyncedOnStartIntervalVar(self, interval_var, duration, offset)

    def FixedDurationStartSyncedOnEndIntervalVar(self, interval_var, duration, offset):
        return _pywrapcp.Solver_FixedDurationStartSyncedOnEndIntervalVar(self, interval_var, duration, offset)

    def FixedDurationEndSyncedOnStartIntervalVar(self, interval_var, duration, offset):
        return _pywrapcp.Solver_FixedDurationEndSyncedOnStartIntervalVar(self, interval_var, duration, offset)

    def FixedDurationEndSyncedOnEndIntervalVar(self, interval_var, duration, offset):
        return _pywrapcp.Solver_FixedDurationEndSyncedOnEndIntervalVar(self, interval_var, duration, offset)

    def IntervalRelaxedMin(self, interval_var):
        return _pywrapcp.Solver_IntervalRelaxedMin(self, interval_var)

    def IntervalRelaxedMax(self, interval_var):
        return _pywrapcp.Solver_IntervalRelaxedMax(self, interval_var)

    def TemporalDisjunction(self, *args):
        return _pywrapcp.Solver_TemporalDisjunction(self, *args)

    def DisjunctiveConstraint(self, intervals, name):
        return _pywrapcp.Solver_DisjunctiveConstraint(self, intervals, name)

    def Cumulative(self, *args):
        return _pywrapcp.Solver_Cumulative(self, *args)

    def Cover(self, vars, target_var):
        return _pywrapcp.Solver_Cover(self, vars, target_var)

    def Assignment(self, *args):
        return _pywrapcp.Solver_Assignment(self, *args)

    def FirstSolutionCollector(self, *args):
        return _pywrapcp.Solver_FirstSolutionCollector(self, *args)

    def LastSolutionCollector(self, *args):
        return _pywrapcp.Solver_LastSolutionCollector(self, *args)

    def BestValueSolutionCollector(self, *args):
        return _pywrapcp.Solver_BestValueSolutionCollector(self, *args)

    def AllSolutionCollector(self, *args):
        return _pywrapcp.Solver_AllSolutionCollector(self, *args)

    def Minimize(self, v, step):
        return _pywrapcp.Solver_Minimize(self, v, step)

    def Maximize(self, v, step):
        return _pywrapcp.Solver_Maximize(self, v, step)

    def Optimize(self, maximize, v, step):
        return _pywrapcp.Solver_Optimize(self, maximize, v, step)

    def WeightedMinimize(self, *args):
        return _pywrapcp.Solver_WeightedMinimize(self, *args)

    def WeightedMaximize(self, *args):
        return _pywrapcp.Solver_WeightedMaximize(self, *args)

    def WeightedOptimize(self, *args):
        return _pywrapcp.Solver_WeightedOptimize(self, *args)

    def TabuSearch(self, maximize, v, step, vars, keep_tenure, forbid_tenure, tabu_factor):
        return _pywrapcp.Solver_TabuSearch(self, maximize, v, step, vars, keep_tenure, forbid_tenure, tabu_factor)

    def SimulatedAnnealing(self, maximize, v, step, initial_temperature):
        return _pywrapcp.Solver_SimulatedAnnealing(self, maximize, v, step, initial_temperature)

    def LubyRestart(self, scale_factor):
        return _pywrapcp.Solver_LubyRestart(self, scale_factor)

    def ConstantRestart(self, frequency):
        return _pywrapcp.Solver_ConstantRestart(self, frequency)

    def TimeLimit(self, time_in_ms):
        return _pywrapcp.Solver_TimeLimit(self, time_in_ms)

    def BranchesLimit(self, branches):
        return _pywrapcp.Solver_BranchesLimit(self, branches)

    def FailuresLimit(self, failures):
        return _pywrapcp.Solver_FailuresLimit(self, failures)

    def SolutionsLimit(self, solutions):
        return _pywrapcp.Solver_SolutionsLimit(self, solutions)

    def Limit(self, *args):
        return _pywrapcp.Solver_Limit(self, *args)

    def CustomLimit(self, limiter):
        return _pywrapcp.Solver_CustomLimit(self, limiter)

    def SearchLog(self, *args):
        return _pywrapcp.Solver_SearchLog(self, *args)

    def SearchTrace(self, prefix):
        return _pywrapcp.Solver_SearchTrace(self, prefix)

    def PrintModelVisitor(self):
        return _pywrapcp.Solver_PrintModelVisitor(self)

    def StatisticsModelVisitor(self):
        return _pywrapcp.Solver_StatisticsModelVisitor(self)

    def AssignVariableValue(self, var, val):
        return _pywrapcp.Solver_AssignVariableValue(self, var, val)

    def VariableLessOrEqualValue(self, var, value):
        return _pywrapcp.Solver_VariableLessOrEqualValue(self, var, value)

    def VariableGreaterOrEqualValue(self, var, value):
        return _pywrapcp.Solver_VariableGreaterOrEqualValue(self, var, value)

    def SplitVariableDomain(self, var, val, start_with_lower_half):
        return _pywrapcp.Solver_SplitVariableDomain(self, var, val, start_with_lower_half)

    def AssignVariableValueOrFail(self, var, value):
        return _pywrapcp.Solver_AssignVariableValueOrFail(self, var, value)

    def AssignVariablesValues(self, vars, values):
        return _pywrapcp.Solver_AssignVariablesValues(self, vars, values)

    def FailDecision(self):
        return _pywrapcp.Solver_FailDecision(self)

    def Decision(self, apply, refute):
        return _pywrapcp.Solver_Decision(self, apply, refute)

    def Compose(self, dbs):
        return _pywrapcp.Solver_Compose(self, dbs)

    def Try(self, dbs):
        return _pywrapcp.Solver_Try(self, dbs)

    def DefaultPhase(self, *args):
        return _pywrapcp.Solver_DefaultPhase(self, *args)

    def ScheduleOrPostpone(self, var, est, marker):
        return _pywrapcp.Solver_ScheduleOrPostpone(self, var, est, marker)

    def ScheduleOrExpedite(self, var, est, marker):
        return _pywrapcp.Solver_ScheduleOrExpedite(self, var, est, marker)

    def RankFirstInterval(self, sequence, index):
        return _pywrapcp.Solver_RankFirstInterval(self, sequence, index)

    def RankLastInterval(self, sequence, index):
        return _pywrapcp.Solver_RankLastInterval(self, sequence, index)

    def Phase(self, *args):
        return _pywrapcp.Solver_Phase(self, *args)

    def DecisionBuilderFromAssignment(self, assignment, db, vars):
        return _pywrapcp.Solver_DecisionBuilderFromAssignment(self, assignment, db, vars)

    def ConstraintAdder(self, ct):
        return _pywrapcp.Solver_ConstraintAdder(self, ct)

    def SolveOnce(self, db, monitors):
        return _pywrapcp.Solver_SolveOnce(self, db, monitors)

    def NestedOptimize(self, *args):
        return _pywrapcp.Solver_NestedOptimize(self, *args)

    def RestoreAssignment(self, assignment):
        return _pywrapcp.Solver_RestoreAssignment(self, assignment)

    def StoreAssignment(self, assignment):
        return _pywrapcp.Solver_StoreAssignment(self, assignment)

    def Operator(self, *args):
        return _pywrapcp.Solver_Operator(self, *args)

    def RandomLnsOperator(self, *args):
        return _pywrapcp.Solver_RandomLnsOperator(self, *args)

    def MoveTowardTargetOperator(self, *args):
        return _pywrapcp.Solver_MoveTowardTargetOperator(self, *args)

    def ConcatenateOperators(self, *args):
        return _pywrapcp.Solver_ConcatenateOperators(self, *args)

    def RandomConcatenateOperators(self, *args):
        return _pywrapcp.Solver_RandomConcatenateOperators(self, *args)

    def NeighborhoodLimit(self, op, limit):
        return _pywrapcp.Solver_NeighborhoodLimit(self, op, limit)

    def LocalSearchPhase(self, *args):
        return _pywrapcp.Solver_LocalSearchPhase(self, *args)

    def LocalSearchPhaseParameters(self, *args):
        return _pywrapcp.Solver_LocalSearchPhaseParameters(self, *args)

    def SearchDepth(self):
        return _pywrapcp.Solver_SearchDepth(self)

    def SearchLeftDepth(self):
        return _pywrapcp.Solver_SearchLeftDepth(self)

    def SolveDepth(self):
        return _pywrapcp.Solver_SolveDepth(self)

    def Rand64(self, size):
        return _pywrapcp.Solver_Rand64(self, size)

    def Rand32(self, size):
        return _pywrapcp.Solver_Rand32(self, size)

    def ReSeed(self, seed):
        return _pywrapcp.Solver_ReSeed(self, seed)

    def LocalSearchProfile(self):
        return _pywrapcp.Solver_LocalSearchProfile(self)

    def Constraints(self):
        return _pywrapcp.Solver_Constraints(self)

    def Accept(self, visitor):
        return _pywrapcp.Solver_Accept(self, visitor)

    def FinishCurrentSearch(self):
        return _pywrapcp.Solver_FinishCurrentSearch(self)

    def RestartCurrentSearch(self):
        return _pywrapcp.Solver_RestartCurrentSearch(self)

    def ShouldFail(self):
        return _pywrapcp.Solver_ShouldFail(self)

    def __str__(self):
        return _pywrapcp.Solver___str__(self)

    def Add(self, ct):
      if isinstance(ct, PyConstraint):
        self.__python_constraints.append(ct)
      self.AddConstraint(ct)


    def TreeNoCycle(self, nexts, active, callback=0):
        return _pywrapcp.Solver_TreeNoCycle(self, nexts, active, callback)

    def SearchLogWithCallback(self, period, callback):
        return _pywrapcp.Solver_SearchLogWithCallback(self, period, callback)

    def ElementFunction(self, values, index):
        return _pywrapcp.Solver_ElementFunction(self, values, index)

    def VarEvalValStrPhase(self, vars, var_evaluator, val_str):
        return _pywrapcp.Solver_VarEvalValStrPhase(self, vars, var_evaluator, val_str)

    def VarStrValEvalPhase(self, vars, var_str, val_eval):
        return _pywrapcp.Solver_VarStrValEvalPhase(self, vars, var_str, val_eval)

    def VarEvalValEvalPhase(self, vars, var_eval, val_eval):
        return _pywrapcp.Solver_VarEvalValEvalPhase(self, vars, var_eval, val_eval)

    def VarStrValEvalTieBreakPhase(self, vars, var_str, val_eval, tie_breaker):
        return _pywrapcp.Solver_VarStrValEvalTieBreakPhase(self, vars, var_str, val_eval, tie_breaker)

    def VarEvalValEvalTieBreakPhase(self, vars, var_eval, val_eval, tie_breaker):
        return _pywrapcp.Solver_VarEvalValEvalTieBreakPhase(self, vars, var_eval, val_eval, tie_breaker)

    def EvalEvalStrPhase(self, vars, evaluator, str):
        return _pywrapcp.Solver_EvalEvalStrPhase(self, vars, evaluator, str)

    def EvalEvalStrTieBreakPhase(self, vars, evaluator, tie_breaker, str):
        return _pywrapcp.Solver_EvalEvalStrTieBreakPhase(self, vars, evaluator, tie_breaker, str)

    def GuidedLocalSearch(self, *args):
        return _pywrapcp.Solver_GuidedLocalSearch(self, *args)

    def SumObjectiveFilter(self, vars, values, objective, filter_enum):
        return _pywrapcp.Solver_SumObjectiveFilter(self, vars, values, objective, filter_enum)
Solver_swigregister = _pywrapcp.Solver_swigregister
Solver_swigregister(Solver)

def Solver_DefaultSolverParameters():
    return _pywrapcp.Solver_DefaultSolverParameters()
Solver_DefaultSolverParameters = _pywrapcp.Solver_DefaultSolverParameters

def Solver_MemoryUsage():
    return _pywrapcp.Solver_MemoryUsage()
Solver_MemoryUsage = _pywrapcp.Solver_MemoryUsage

class BaseObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BaseObject, name)

    def __init__(self):
        if self.__class__ == BaseObject:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_BaseObject(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_BaseObject
    __del__ = lambda self: None

    def DebugString(self):
        return _pywrapcp.BaseObject_DebugString(self)

    def __str__(self):
        return _pywrapcp.BaseObject___str__(self)

    def __repr__(self):
        return _pywrapcp.BaseObject___repr__(self)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_BaseObject(self)
        return weakref_proxy(self)
BaseObject_swigregister = _pywrapcp.BaseObject_swigregister
BaseObject_swigregister(BaseObject)

class PropagationBaseObject(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropagationBaseObject, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PropagationBaseObject, name)
    __repr__ = _swig_repr

    def __init__(self, s):
        if self.__class__ == PropagationBaseObject:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_PropagationBaseObject(_self, s)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_PropagationBaseObject
    __del__ = lambda self: None

    def DebugString(self):
        return _pywrapcp.PropagationBaseObject_DebugString(self)

    def solver(self):
        return _pywrapcp.PropagationBaseObject_solver(self)

    def Name(self):
        return _pywrapcp.PropagationBaseObject_Name(self)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_PropagationBaseObject(self)
        return weakref_proxy(self)
PropagationBaseObject_swigregister = _pywrapcp.PropagationBaseObject_swigregister
PropagationBaseObject_swigregister(PropagationBaseObject)

class Decision(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Decision, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Decision, name)

    def __init__(self):
        if self.__class__ == Decision:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_Decision(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_Decision
    __del__ = lambda self: None

    def ApplyWrapper(self, s):
        return _pywrapcp.Decision_ApplyWrapper(self, s)

    def RefuteWrapper(self, s):
        return _pywrapcp.Decision_RefuteWrapper(self, s)

    def DebugString(self):
        return _pywrapcp.Decision_DebugString(self)

    def __repr__(self):
        return _pywrapcp.Decision___repr__(self)

    def __str__(self):
        return _pywrapcp.Decision___str__(self)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_Decision(self)
        return weakref_proxy(self)
Decision_swigregister = _pywrapcp.Decision_swigregister
Decision_swigregister(Decision)

class DecisionBuilder(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DecisionBuilder, name)

    def __init__(self):
        if self.__class__ == DecisionBuilder:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_DecisionBuilder(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_DecisionBuilder
    __del__ = lambda self: None

    def NextWrapper(self, s):
        return _pywrapcp.DecisionBuilder_NextWrapper(self, s)

    def DebugString(self):
        return _pywrapcp.DecisionBuilder_DebugString(self)

    def __repr__(self):
        return _pywrapcp.DecisionBuilder___repr__(self)

    def __str__(self):
        return _pywrapcp.DecisionBuilder___str__(self)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_DecisionBuilder(self)
        return weakref_proxy(self)
DecisionBuilder_swigregister = _pywrapcp.DecisionBuilder_swigregister
DecisionBuilder_swigregister(DecisionBuilder)

class Demon(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Demon, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Demon, name)
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == Demon:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_Demon(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_Demon
    __del__ = lambda self: None

    def RunWrapper(self, s):
        return _pywrapcp.Demon_RunWrapper(self, s)

    def Priority(self):
        return _pywrapcp.Demon_Priority(self)

    def DebugString(self):
        return _pywrapcp.Demon_DebugString(self)

    def Inhibit(self, s):
        return _pywrapcp.Demon_Inhibit(self, s)

    def Desinhibit(self, s):
        return _pywrapcp.Demon_Desinhibit(self, s)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_Demon(self)
        return weakref_proxy(self)
Demon_swigregister = _pywrapcp.Demon_swigregister
Demon_swigregister(Demon)

class Constraint(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Constraint, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Constraint, name)

    def __init__(self, solver):
        if self.__class__ == Constraint:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_Constraint(_self, solver)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_Constraint
    __del__ = lambda self: None

    def Post(self):
        return _pywrapcp.Constraint_Post(self)

    def InitialPropagateWrapper(self):
        return _pywrapcp.Constraint_InitialPropagateWrapper(self)

    def DebugString(self):
        return _pywrapcp.Constraint_DebugString(self)

    def Var(self):
        return _pywrapcp.Constraint_Var(self)

    def __repr__(self):
        return _pywrapcp.Constraint___repr__(self)

    def __str__(self):
        return _pywrapcp.Constraint___str__(self)

    def __add__(self, *args):
        return _pywrapcp.Constraint___add__(self, *args)

    def __radd__(self, v):
        return _pywrapcp.Constraint___radd__(self, v)

    def __sub__(self, *args):
        return _pywrapcp.Constraint___sub__(self, *args)

    def __rsub__(self, v):
        return _pywrapcp.Constraint___rsub__(self, v)

    def __mul__(self, *args):
        return _pywrapcp.Constraint___mul__(self, *args)

    def __rmul__(self, v):
        return _pywrapcp.Constraint___rmul__(self, v)

    def __floordiv__(self, v):
        return _pywrapcp.Constraint___floordiv__(self, v)

    def __neg__(self):
        return _pywrapcp.Constraint___neg__(self)

    def __abs__(self):
        return _pywrapcp.Constraint___abs__(self)

    def Square(self):
        return _pywrapcp.Constraint_Square(self)

    def __eq__(self, *args):
        return _pywrapcp.Constraint___eq__(self, *args)

    def __ne__(self, *args):
        return _pywrapcp.Constraint___ne__(self, *args)

    def __ge__(self, *args):
        return _pywrapcp.Constraint___ge__(self, *args)

    def __gt__(self, *args):
        return _pywrapcp.Constraint___gt__(self, *args)

    def __le__(self, *args):
        return _pywrapcp.Constraint___le__(self, *args)

    def __lt__(self, *args):
        return _pywrapcp.Constraint___lt__(self, *args)

    def MapTo(self, vars):
        return _pywrapcp.Constraint_MapTo(self, vars)

    def IndexOf(self, *args):
        return _pywrapcp.Constraint_IndexOf(self, *args)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_Constraint(self)
        return weakref_proxy(self)
Constraint_swigregister = _pywrapcp.Constraint_swigregister
Constraint_swigregister(Constraint)

class SearchMonitor(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchMonitor, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SearchMonitor, name)

    def __init__(self, s):
        if self.__class__ == SearchMonitor:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_SearchMonitor(_self, s)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_SearchMonitor
    __del__ = lambda self: None

    def EnterSearch(self):
        return _pywrapcp.SearchMonitor_EnterSearch(self)

    def RestartSearch(self):
        return _pywrapcp.SearchMonitor_RestartSearch(self)

    def ExitSearch(self):
        return _pywrapcp.SearchMonitor_ExitSearch(self)

    def BeginNextDecision(self, b):
        return _pywrapcp.SearchMonitor_BeginNextDecision(self, b)

    def EndNextDecision(self, b, d):
        return _pywrapcp.SearchMonitor_EndNextDecision(self, b, d)

    def ApplyDecision(self, d):
        return _pywrapcp.SearchMonitor_ApplyDecision(self, d)

    def RefuteDecision(self, d):
        return _pywrapcp.SearchMonitor_RefuteDecision(self, d)

    def AfterDecision(self, d, apply):
        return _pywrapcp.SearchMonitor_AfterDecision(self, d, apply)

    def BeginFail(self):
        return _pywrapcp.SearchMonitor_BeginFail(self)

    def EndFail(self):
        return _pywrapcp.SearchMonitor_EndFail(self)

    def BeginInitialPropagation(self):
        return _pywrapcp.SearchMonitor_BeginInitialPropagation(self)

    def EndInitialPropagation(self):
        return _pywrapcp.SearchMonitor_EndInitialPropagation(self)

    def AcceptSolution(self):
        return _pywrapcp.SearchMonitor_AcceptSolution(self)

    def AtSolution(self):
        return _pywrapcp.SearchMonitor_AtSolution(self)

    def NoMoreSolutions(self):
        return _pywrapcp.SearchMonitor_NoMoreSolutions(self)

    def LocalOptimum(self):
        return _pywrapcp.SearchMonitor_LocalOptimum(self)

    def AcceptDelta(self, delta, deltadelta):
        return _pywrapcp.SearchMonitor_AcceptDelta(self, delta, deltadelta)

    def AcceptNeighbor(self):
        return _pywrapcp.SearchMonitor_AcceptNeighbor(self)

    def solver(self):
        return _pywrapcp.SearchMonitor_solver(self)

    def __repr__(self):
        return _pywrapcp.SearchMonitor___repr__(self)

    def __str__(self):
        return _pywrapcp.SearchMonitor___str__(self)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_SearchMonitor(self)
        return weakref_proxy(self)
SearchMonitor_swigregister = _pywrapcp.SearchMonitor_swigregister
SearchMonitor_swigregister(SearchMonitor)

class IntExpr(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntExpr, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntExpr, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")

    def Min(self):
        return _pywrapcp.IntExpr_Min(self)

    def SetMin(self, m):
        return _pywrapcp.IntExpr_SetMin(self, m)

    def Max(self):
        return _pywrapcp.IntExpr_Max(self)

    def SetMax(self, m):
        return _pywrapcp.IntExpr_SetMax(self, m)

    def SetRange(self, l, u):
        return _pywrapcp.IntExpr_SetRange(self, l, u)

    def SetValue(self, v):
        return _pywrapcp.IntExpr_SetValue(self, v)

    def Bound(self):
        return _pywrapcp.IntExpr_Bound(self)

    def IsVar(self):
        return _pywrapcp.IntExpr_IsVar(self)

    def Var(self):
        return _pywrapcp.IntExpr_Var(self)

    def VarWithName(self, name):
        return _pywrapcp.IntExpr_VarWithName(self, name)

    def WhenRange(self, *args):
        return _pywrapcp.IntExpr_WhenRange(self, *args)

    def __repr__(self):
        return _pywrapcp.IntExpr___repr__(self)

    def __str__(self):
        return _pywrapcp.IntExpr___str__(self)

    def __add__(self, *args):
        return _pywrapcp.IntExpr___add__(self, *args)

    def __radd__(self, v):
        return _pywrapcp.IntExpr___radd__(self, v)

    def __sub__(self, *args):
        return _pywrapcp.IntExpr___sub__(self, *args)

    def __rsub__(self, v):
        return _pywrapcp.IntExpr___rsub__(self, v)

    def __mul__(self, *args):
        return _pywrapcp.IntExpr___mul__(self, *args)

    def __rmul__(self, v):
        return _pywrapcp.IntExpr___rmul__(self, v)

    def __floordiv__(self, *args):
        return _pywrapcp.IntExpr___floordiv__(self, *args)

    def __mod__(self, *args):
        return _pywrapcp.IntExpr___mod__(self, *args)

    def __neg__(self):
        return _pywrapcp.IntExpr___neg__(self)

    def __abs__(self):
        return _pywrapcp.IntExpr___abs__(self)

    def Square(self):
        return _pywrapcp.IntExpr_Square(self)

    def __eq__(self, *args):
        return _pywrapcp.IntExpr___eq__(self, *args)

    def __ne__(self, *args):
        return _pywrapcp.IntExpr___ne__(self, *args)

    def __ge__(self, *args):
        return _pywrapcp.IntExpr___ge__(self, *args)

    def __gt__(self, *args):
        return _pywrapcp.IntExpr___gt__(self, *args)

    def __le__(self, *args):
        return _pywrapcp.IntExpr___le__(self, *args)

    def __lt__(self, *args):
        return _pywrapcp.IntExpr___lt__(self, *args)

    def MapTo(self, vars):
        return _pywrapcp.IntExpr_MapTo(self, vars)

    def IndexOf(self, *args):
        return _pywrapcp.IntExpr_IndexOf(self, *args)

    def IsMember(self, values):
        return _pywrapcp.IntExpr_IsMember(self, values)

    def Member(self, values):
        return _pywrapcp.IntExpr_Member(self, values)

    def NotMember(self, starts, ends):
        return _pywrapcp.IntExpr_NotMember(self, starts, ends)
IntExpr_swigregister = _pywrapcp.IntExpr_swigregister
IntExpr_swigregister(IntExpr)

class IntVarIterator(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarIterator, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Init(self):
        return _pywrapcp.IntVarIterator_Init(self)

    def Ok(self):
        return _pywrapcp.IntVarIterator_Ok(self)

    def Value(self):
        return _pywrapcp.IntVarIterator_Value(self)

    def Next(self):
        return _pywrapcp.IntVarIterator_Next(self)

    def DebugString(self):
        return _pywrapcp.IntVarIterator_DebugString(self)

    def __iter__(self):
      self.Init()
      return self

    def next(self):
      if self.Ok():
        result = self.Value()
        self.Next()
        return result
      else:
        raise StopIteration()

    def __next__(self):
      return self.next()

IntVarIterator_swigregister = _pywrapcp.IntVarIterator_swigregister
IntVarIterator_swigregister(IntVarIterator)

class IntVar(IntExpr):
    __swig_setmethods__ = {}
    for _s in [IntExpr]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVar, name, value)
    __swig_getmethods__ = {}
    for _s in [IntExpr]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")

    def IsVar(self):
        return _pywrapcp.IntVar_IsVar(self)

    def Var(self):
        return _pywrapcp.IntVar_Var(self)

    def Value(self):
        return _pywrapcp.IntVar_Value(self)

    def RemoveValue(self, v):
        return _pywrapcp.IntVar_RemoveValue(self, v)

    def RemoveInterval(self, l, u):
        return _pywrapcp.IntVar_RemoveInterval(self, l, u)

    def RemoveValues(self, values):
        return _pywrapcp.IntVar_RemoveValues(self, values)

    def SetValues(self, values):
        return _pywrapcp.IntVar_SetValues(self, values)

    def WhenBound(self, *args):
        return _pywrapcp.IntVar_WhenBound(self, *args)

    def WhenDomain(self, *args):
        return _pywrapcp.IntVar_WhenDomain(self, *args)

    def Size(self):
        return _pywrapcp.IntVar_Size(self)

    def Contains(self, v):
        return _pywrapcp.IntVar_Contains(self, v)

    def HoleIteratorAux(self, reversible):
        return _pywrapcp.IntVar_HoleIteratorAux(self, reversible)

    def DomainIteratorAux(self, reversible):
        return _pywrapcp.IntVar_DomainIteratorAux(self, reversible)

    def OldMin(self):
        return _pywrapcp.IntVar_OldMin(self)

    def OldMax(self):
        return _pywrapcp.IntVar_OldMax(self)

    def __repr__(self):
        return _pywrapcp.IntVar___repr__(self)

    def __str__(self):
        return _pywrapcp.IntVar___str__(self)

    def DomainIterator(self):
      return iter(self.DomainIteratorAux(False))

    def HoleIterator(self):
      return iter(self.HoleIteratorAux(False))

IntVar_swigregister = _pywrapcp.IntVar_swigregister
IntVar_swigregister(IntVar)

class SolutionCollector(SearchMonitor):
    __swig_setmethods__ = {}
    for _s in [SearchMonitor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SolutionCollector, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchMonitor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SolutionCollector, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DebugString(self):
        return _pywrapcp.SolutionCollector_DebugString(self)

    def Add(self, *args):
        return _pywrapcp.SolutionCollector_Add(self, *args)

    def AddObjective(self, objective):
        return _pywrapcp.SolutionCollector_AddObjective(self, objective)

    def EnterSearch(self):
        return _pywrapcp.SolutionCollector_EnterSearch(self)

    def SolutionCount(self):
        return _pywrapcp.SolutionCollector_SolutionCount(self)

    def Solution(self, n):
        return _pywrapcp.SolutionCollector_Solution(self, n)

    def WallTime(self, n):
        return _pywrapcp.SolutionCollector_WallTime(self, n)

    def Branches(self, n):
        return _pywrapcp.SolutionCollector_Branches(self, n)

    def Failures(self, n):
        return _pywrapcp.SolutionCollector_Failures(self, n)

    def ObjectiveValue(self, n):
        return _pywrapcp.SolutionCollector_ObjectiveValue(self, n)

    def Value(self, n, var):
        return _pywrapcp.SolutionCollector_Value(self, n, var)

    def StartValue(self, n, var):
        return _pywrapcp.SolutionCollector_StartValue(self, n, var)

    def EndValue(self, n, var):
        return _pywrapcp.SolutionCollector_EndValue(self, n, var)

    def DurationValue(self, n, var):
        return _pywrapcp.SolutionCollector_DurationValue(self, n, var)

    def PerformedValue(self, n, var):
        return _pywrapcp.SolutionCollector_PerformedValue(self, n, var)

    def ForwardSequence(self, n, var):
        return _pywrapcp.SolutionCollector_ForwardSequence(self, n, var)

    def BackwardSequence(self, n, var):
        return _pywrapcp.SolutionCollector_BackwardSequence(self, n, var)

    def Unperformed(self, n, var):
        return _pywrapcp.SolutionCollector_Unperformed(self, n, var)
SolutionCollector_swigregister = _pywrapcp.SolutionCollector_swigregister
SolutionCollector_swigregister(SolutionCollector)

class OptimizeVar(SearchMonitor):
    __swig_setmethods__ = {}
    for _s in [SearchMonitor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptimizeVar, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchMonitor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptimizeVar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Best(self):
        return _pywrapcp.OptimizeVar_Best(self)

    def Var(self):
        return _pywrapcp.OptimizeVar_Var(self)

    def AcceptDelta(self, delta, deltadelta):
        return _pywrapcp.OptimizeVar_AcceptDelta(self, delta, deltadelta)

    def EnterSearch(self):
        return _pywrapcp.OptimizeVar_EnterSearch(self)

    def BeginNextDecision(self, db):
        return _pywrapcp.OptimizeVar_BeginNextDecision(self, db)

    def RefuteDecision(self, d):
        return _pywrapcp.OptimizeVar_RefuteDecision(self, d)

    def AtSolution(self):
        return _pywrapcp.OptimizeVar_AtSolution(self)

    def AcceptSolution(self):
        return _pywrapcp.OptimizeVar_AcceptSolution(self)

    def DebugString(self):
        return _pywrapcp.OptimizeVar_DebugString(self)
OptimizeVar_swigregister = _pywrapcp.OptimizeVar_swigregister
OptimizeVar_swigregister(OptimizeVar)

class SearchLimit(SearchMonitor):
    __swig_setmethods__ = {}
    for _s in [SearchMonitor]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchLimit, name, value)
    __swig_getmethods__ = {}
    for _s in [SearchMonitor]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SearchLimit, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_SearchLimit
    __del__ = lambda self: None

    def Crossed(self):
        return _pywrapcp.SearchLimit_Crossed(self)

    def Check(self):
        return _pywrapcp.SearchLimit_Check(self)

    def Init(self):
        return _pywrapcp.SearchLimit_Init(self)

    def EnterSearch(self):
        return _pywrapcp.SearchLimit_EnterSearch(self)

    def BeginNextDecision(self, b):
        return _pywrapcp.SearchLimit_BeginNextDecision(self, b)

    def RefuteDecision(self, d):
        return _pywrapcp.SearchLimit_RefuteDecision(self, d)

    def DebugString(self):
        return _pywrapcp.SearchLimit_DebugString(self)
SearchLimit_swigregister = _pywrapcp.SearchLimit_swigregister
SearchLimit_swigregister(SearchLimit)

class IntervalVar(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalVar, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalVar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")

    def StartMin(self):
        return _pywrapcp.IntervalVar_StartMin(self)

    def StartMax(self):
        return _pywrapcp.IntervalVar_StartMax(self)

    def SetStartMin(self, m):
        return _pywrapcp.IntervalVar_SetStartMin(self, m)

    def SetStartMax(self, m):
        return _pywrapcp.IntervalVar_SetStartMax(self, m)

    def SetStartRange(self, mi, ma):
        return _pywrapcp.IntervalVar_SetStartRange(self, mi, ma)

    def OldStartMin(self):
        return _pywrapcp.IntervalVar_OldStartMin(self)

    def OldStartMax(self):
        return _pywrapcp.IntervalVar_OldStartMax(self)

    def WhenStartRange(self, *args):
        return _pywrapcp.IntervalVar_WhenStartRange(self, *args)

    def WhenStartBound(self, *args):
        return _pywrapcp.IntervalVar_WhenStartBound(self, *args)

    def DurationMin(self):
        return _pywrapcp.IntervalVar_DurationMin(self)

    def DurationMax(self):
        return _pywrapcp.IntervalVar_DurationMax(self)

    def SetDurationMin(self, m):
        return _pywrapcp.IntervalVar_SetDurationMin(self, m)

    def SetDurationMax(self, m):
        return _pywrapcp.IntervalVar_SetDurationMax(self, m)

    def SetDurationRange(self, mi, ma):
        return _pywrapcp.IntervalVar_SetDurationRange(self, mi, ma)

    def OldDurationMin(self):
        return _pywrapcp.IntervalVar_OldDurationMin(self)

    def OldDurationMax(self):
        return _pywrapcp.IntervalVar_OldDurationMax(self)

    def WhenDurationRange(self, *args):
        return _pywrapcp.IntervalVar_WhenDurationRange(self, *args)

    def WhenDurationBound(self, *args):
        return _pywrapcp.IntervalVar_WhenDurationBound(self, *args)

    def EndMin(self):
        return _pywrapcp.IntervalVar_EndMin(self)

    def EndMax(self):
        return _pywrapcp.IntervalVar_EndMax(self)

    def SetEndMin(self, m):
        return _pywrapcp.IntervalVar_SetEndMin(self, m)

    def SetEndMax(self, m):
        return _pywrapcp.IntervalVar_SetEndMax(self, m)

    def SetEndRange(self, mi, ma):
        return _pywrapcp.IntervalVar_SetEndRange(self, mi, ma)

    def OldEndMin(self):
        return _pywrapcp.IntervalVar_OldEndMin(self)

    def OldEndMax(self):
        return _pywrapcp.IntervalVar_OldEndMax(self)

    def WhenEndRange(self, *args):
        return _pywrapcp.IntervalVar_WhenEndRange(self, *args)

    def WhenEndBound(self, *args):
        return _pywrapcp.IntervalVar_WhenEndBound(self, *args)

    def MustBePerformed(self):
        return _pywrapcp.IntervalVar_MustBePerformed(self)

    def MayBePerformed(self):
        return _pywrapcp.IntervalVar_MayBePerformed(self)

    def CannotBePerformed(self):
        return _pywrapcp.IntervalVar_CannotBePerformed(self)

    def IsPerformedBound(self):
        return _pywrapcp.IntervalVar_IsPerformedBound(self)

    def SetPerformed(self, val):
        return _pywrapcp.IntervalVar_SetPerformed(self, val)

    def WasPerformedBound(self):
        return _pywrapcp.IntervalVar_WasPerformedBound(self)

    def WhenPerformedBound(self, *args):
        return _pywrapcp.IntervalVar_WhenPerformedBound(self, *args)

    def WhenAnything(self, *args):
        return _pywrapcp.IntervalVar_WhenAnything(self, *args)

    def StartExpr(self):
        return _pywrapcp.IntervalVar_StartExpr(self)

    def DurationExpr(self):
        return _pywrapcp.IntervalVar_DurationExpr(self)

    def EndExpr(self):
        return _pywrapcp.IntervalVar_EndExpr(self)

    def PerformedExpr(self):
        return _pywrapcp.IntervalVar_PerformedExpr(self)

    def SafeStartExpr(self, unperformed_value):
        return _pywrapcp.IntervalVar_SafeStartExpr(self, unperformed_value)

    def SafeDurationExpr(self, unperformed_value):
        return _pywrapcp.IntervalVar_SafeDurationExpr(self, unperformed_value)

    def SafeEndExpr(self, unperformed_value):
        return _pywrapcp.IntervalVar_SafeEndExpr(self, unperformed_value)

    def EndsAfterEnd(self, other):
        return _pywrapcp.IntervalVar_EndsAfterEnd(self, other)

    def EndsAfterEndWithDelay(self, other, delay):
        return _pywrapcp.IntervalVar_EndsAfterEndWithDelay(self, other, delay)

    def EndsAfterStart(self, other):
        return _pywrapcp.IntervalVar_EndsAfterStart(self, other)

    def EndsAfterStartWithDelay(self, other, delay):
        return _pywrapcp.IntervalVar_EndsAfterStartWithDelay(self, other, delay)

    def EndsAtEnd(self, other):
        return _pywrapcp.IntervalVar_EndsAtEnd(self, other)

    def EndsAtEndWithDelay(self, other, delay):
        return _pywrapcp.IntervalVar_EndsAtEndWithDelay(self, other, delay)

    def EndsAtStart(self, other):
        return _pywrapcp.IntervalVar_EndsAtStart(self, other)

    def EndsAtStartWithDelay(self, other, delay):
        return _pywrapcp.IntervalVar_EndsAtStartWithDelay(self, other, delay)

    def StartsAfterEnd(self, other):
        return _pywrapcp.IntervalVar_StartsAfterEnd(self, other)

    def StartsAfterEndWithDelay(self, other, delay):
        return _pywrapcp.IntervalVar_StartsAfterEndWithDelay(self, other, delay)

    def StartsAfterStart(self, other):
        return _pywrapcp.IntervalVar_StartsAfterStart(self, other)

    def StartsAfterStartWithDelay(self, other, delay):
        return _pywrapcp.IntervalVar_StartsAfterStartWithDelay(self, other, delay)

    def StartsAtEnd(self, other):
        return _pywrapcp.IntervalVar_StartsAtEnd(self, other)

    def StartsAtEndWithDelay(self, other, delay):
        return _pywrapcp.IntervalVar_StartsAtEndWithDelay(self, other, delay)

    def StartsAtStart(self, other):
        return _pywrapcp.IntervalVar_StartsAtStart(self, other)

    def StartsAtStartWithDelay(self, other, delay):
        return _pywrapcp.IntervalVar_StartsAtStartWithDelay(self, other, delay)

    def StaysInSync(self, other):
        return _pywrapcp.IntervalVar_StaysInSync(self, other)

    def StaysInSyncWithDelay(self, other, delay):
        return _pywrapcp.IntervalVar_StaysInSyncWithDelay(self, other, delay)

    def EndsAfter(self, date):
        return _pywrapcp.IntervalVar_EndsAfter(self, date)

    def EndsAt(self, date):
        return _pywrapcp.IntervalVar_EndsAt(self, date)

    def EndsBefore(self, date):
        return _pywrapcp.IntervalVar_EndsBefore(self, date)

    def StartsAfter(self, date):
        return _pywrapcp.IntervalVar_StartsAfter(self, date)

    def StartsAt(self, date):
        return _pywrapcp.IntervalVar_StartsAt(self, date)

    def StartsBefore(self, date):
        return _pywrapcp.IntervalVar_StartsBefore(self, date)

    def CrossesDate(self, date):
        return _pywrapcp.IntervalVar_CrossesDate(self, date)

    def AvoidsDate(self, date):
        return _pywrapcp.IntervalVar_AvoidsDate(self, date)

    def __repr__(self):
        return _pywrapcp.IntervalVar___repr__(self)

    def __str__(self):
        return _pywrapcp.IntervalVar___str__(self)
IntervalVar_swigregister = _pywrapcp.IntervalVar_swigregister
IntervalVar_swigregister(IntervalVar)

class SequenceVar(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceVar, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceVar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")

    def DebugString(self):
        return _pywrapcp.SequenceVar_DebugString(self)

    def RankFirst(self, index):
        return _pywrapcp.SequenceVar_RankFirst(self, index)

    def RankNotFirst(self, index):
        return _pywrapcp.SequenceVar_RankNotFirst(self, index)

    def RankLast(self, index):
        return _pywrapcp.SequenceVar_RankLast(self, index)

    def RankNotLast(self, index):
        return _pywrapcp.SequenceVar_RankNotLast(self, index)

    def Interval(self, index):
        return _pywrapcp.SequenceVar_Interval(self, index)

    def Next(self, index):
        return _pywrapcp.SequenceVar_Next(self, index)

    def Size(self):
        return _pywrapcp.SequenceVar_Size(self)

    def __repr__(self):
        return _pywrapcp.SequenceVar___repr__(self)

    def __str__(self):
        return _pywrapcp.SequenceVar___str__(self)
SequenceVar_swigregister = _pywrapcp.SequenceVar_swigregister
SequenceVar_swigregister(SequenceVar)

class AssignmentElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AssignmentElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AssignmentElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Activate(self):
        return _pywrapcp.AssignmentElement_Activate(self)

    def Deactivate(self):
        return _pywrapcp.AssignmentElement_Deactivate(self)

    def Activated(self):
        return _pywrapcp.AssignmentElement_Activated(self)
    __swig_destroy__ = _pywrapcp.delete_AssignmentElement
    __del__ = lambda self: None
AssignmentElement_swigregister = _pywrapcp.AssignmentElement_swigregister
AssignmentElement_swigregister(AssignmentElement)

class IntVarElement(AssignmentElement):
    __swig_setmethods__ = {}
    for _s in [AssignmentElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarElement, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Var(self):
        return _pywrapcp.IntVarElement_Var(self)

    def Min(self):
        return _pywrapcp.IntVarElement_Min(self)

    def SetMin(self, m):
        return _pywrapcp.IntVarElement_SetMin(self, m)

    def Max(self):
        return _pywrapcp.IntVarElement_Max(self)

    def SetMax(self, m):
        return _pywrapcp.IntVarElement_SetMax(self, m)

    def Value(self):
        return _pywrapcp.IntVarElement_Value(self)

    def Bound(self):
        return _pywrapcp.IntVarElement_Bound(self)

    def SetRange(self, l, u):
        return _pywrapcp.IntVarElement_SetRange(self, l, u)

    def SetValue(self, v):
        return _pywrapcp.IntVarElement_SetValue(self, v)

    def __eq__(self, element):
        return _pywrapcp.IntVarElement___eq__(self, element)

    def __ne__(self, element):
        return _pywrapcp.IntVarElement___ne__(self, element)
    __swig_destroy__ = _pywrapcp.delete_IntVarElement
    __del__ = lambda self: None
IntVarElement_swigregister = _pywrapcp.IntVarElement_swigregister
IntVarElement_swigregister(IntVarElement)

class IntervalVarElement(AssignmentElement):
    __swig_setmethods__ = {}
    for _s in [AssignmentElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalVarElement, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalVarElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Var(self):
        return _pywrapcp.IntervalVarElement_Var(self)

    def StartMin(self):
        return _pywrapcp.IntervalVarElement_StartMin(self)

    def StartMax(self):
        return _pywrapcp.IntervalVarElement_StartMax(self)

    def StartValue(self):
        return _pywrapcp.IntervalVarElement_StartValue(self)

    def DurationMin(self):
        return _pywrapcp.IntervalVarElement_DurationMin(self)

    def DurationMax(self):
        return _pywrapcp.IntervalVarElement_DurationMax(self)

    def DurationValue(self):
        return _pywrapcp.IntervalVarElement_DurationValue(self)

    def EndMin(self):
        return _pywrapcp.IntervalVarElement_EndMin(self)

    def EndMax(self):
        return _pywrapcp.IntervalVarElement_EndMax(self)

    def EndValue(self):
        return _pywrapcp.IntervalVarElement_EndValue(self)

    def PerformedMin(self):
        return _pywrapcp.IntervalVarElement_PerformedMin(self)

    def PerformedMax(self):
        return _pywrapcp.IntervalVarElement_PerformedMax(self)

    def PerformedValue(self):
        return _pywrapcp.IntervalVarElement_PerformedValue(self)

    def SetStartMin(self, m):
        return _pywrapcp.IntervalVarElement_SetStartMin(self, m)

    def SetStartMax(self, m):
        return _pywrapcp.IntervalVarElement_SetStartMax(self, m)

    def SetStartRange(self, mi, ma):
        return _pywrapcp.IntervalVarElement_SetStartRange(self, mi, ma)

    def SetStartValue(self, v):
        return _pywrapcp.IntervalVarElement_SetStartValue(self, v)

    def SetDurationMin(self, m):
        return _pywrapcp.IntervalVarElement_SetDurationMin(self, m)

    def SetDurationMax(self, m):
        return _pywrapcp.IntervalVarElement_SetDurationMax(self, m)

    def SetDurationRange(self, mi, ma):
        return _pywrapcp.IntervalVarElement_SetDurationRange(self, mi, ma)

    def SetDurationValue(self, v):
        return _pywrapcp.IntervalVarElement_SetDurationValue(self, v)

    def SetEndMin(self, m):
        return _pywrapcp.IntervalVarElement_SetEndMin(self, m)

    def SetEndMax(self, m):
        return _pywrapcp.IntervalVarElement_SetEndMax(self, m)

    def SetEndRange(self, mi, ma):
        return _pywrapcp.IntervalVarElement_SetEndRange(self, mi, ma)

    def SetEndValue(self, v):
        return _pywrapcp.IntervalVarElement_SetEndValue(self, v)

    def SetPerformedMin(self, m):
        return _pywrapcp.IntervalVarElement_SetPerformedMin(self, m)

    def SetPerformedMax(self, m):
        return _pywrapcp.IntervalVarElement_SetPerformedMax(self, m)

    def SetPerformedRange(self, mi, ma):
        return _pywrapcp.IntervalVarElement_SetPerformedRange(self, mi, ma)

    def SetPerformedValue(self, v):
        return _pywrapcp.IntervalVarElement_SetPerformedValue(self, v)

    def __eq__(self, element):
        return _pywrapcp.IntervalVarElement___eq__(self, element)

    def __ne__(self, element):
        return _pywrapcp.IntervalVarElement___ne__(self, element)
    __swig_destroy__ = _pywrapcp.delete_IntervalVarElement
    __del__ = lambda self: None
IntervalVarElement_swigregister = _pywrapcp.IntervalVarElement_swigregister
IntervalVarElement_swigregister(IntervalVarElement)

class SequenceVarElement(AssignmentElement):
    __swig_setmethods__ = {}
    for _s in [AssignmentElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceVarElement, name, value)
    __swig_getmethods__ = {}
    for _s in [AssignmentElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceVarElement, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Var(self):
        return _pywrapcp.SequenceVarElement_Var(self)

    def ForwardSequence(self):
        return _pywrapcp.SequenceVarElement_ForwardSequence(self)

    def BackwardSequence(self):
        return _pywrapcp.SequenceVarElement_BackwardSequence(self)

    def Unperformed(self):
        return _pywrapcp.SequenceVarElement_Unperformed(self)

    def SetSequence(self, forward_sequence, backward_sequence, unperformed):
        return _pywrapcp.SequenceVarElement_SetSequence(self, forward_sequence, backward_sequence, unperformed)

    def SetForwardSequence(self, forward_sequence):
        return _pywrapcp.SequenceVarElement_SetForwardSequence(self, forward_sequence)

    def SetBackwardSequence(self, backward_sequence):
        return _pywrapcp.SequenceVarElement_SetBackwardSequence(self, backward_sequence)

    def SetUnperformed(self, unperformed):
        return _pywrapcp.SequenceVarElement_SetUnperformed(self, unperformed)

    def __eq__(self, element):
        return _pywrapcp.SequenceVarElement___eq__(self, element)

    def __ne__(self, element):
        return _pywrapcp.SequenceVarElement___ne__(self, element)
    __swig_destroy__ = _pywrapcp.delete_SequenceVarElement
    __del__ = lambda self: None
SequenceVarElement_swigregister = _pywrapcp.SequenceVarElement_swigregister
SequenceVarElement_swigregister(SequenceVarElement)

class Assignment(PropagationBaseObject):
    __swig_setmethods__ = {}
    for _s in [PropagationBaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Assignment, name, value)
    __swig_getmethods__ = {}
    for _s in [PropagationBaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Assignment, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Clear(self):
        return _pywrapcp.Assignment_Clear(self)

    def Empty(self):
        return _pywrapcp.Assignment_Empty(self)

    def Size(self):
        return _pywrapcp.Assignment_Size(self)

    def NumIntVars(self):
        return _pywrapcp.Assignment_NumIntVars(self)

    def NumIntervalVars(self):
        return _pywrapcp.Assignment_NumIntervalVars(self)

    def NumSequenceVars(self):
        return _pywrapcp.Assignment_NumSequenceVars(self)

    def Store(self):
        return _pywrapcp.Assignment_Store(self)

    def Restore(self):
        return _pywrapcp.Assignment_Restore(self)

    def Load(self, *args):
        return _pywrapcp.Assignment_Load(self, *args)

    def Save(self, *args):
        return _pywrapcp.Assignment_Save(self, *args)

    def AddObjective(self, v):
        return _pywrapcp.Assignment_AddObjective(self, v)

    def Objective(self):
        return _pywrapcp.Assignment_Objective(self)

    def HasObjective(self):
        return _pywrapcp.Assignment_HasObjective(self)

    def ObjectiveMin(self):
        return _pywrapcp.Assignment_ObjectiveMin(self)

    def ObjectiveMax(self):
        return _pywrapcp.Assignment_ObjectiveMax(self)

    def ObjectiveValue(self):
        return _pywrapcp.Assignment_ObjectiveValue(self)

    def ObjectiveBound(self):
        return _pywrapcp.Assignment_ObjectiveBound(self)

    def SetObjectiveMin(self, m):
        return _pywrapcp.Assignment_SetObjectiveMin(self, m)

    def SetObjectiveMax(self, m):
        return _pywrapcp.Assignment_SetObjectiveMax(self, m)

    def SetObjectiveValue(self, value):
        return _pywrapcp.Assignment_SetObjectiveValue(self, value)

    def SetObjectiveRange(self, l, u):
        return _pywrapcp.Assignment_SetObjectiveRange(self, l, u)

    def Min(self, var):
        return _pywrapcp.Assignment_Min(self, var)

    def Max(self, var):
        return _pywrapcp.Assignment_Max(self, var)

    def Value(self, var):
        return _pywrapcp.Assignment_Value(self, var)

    def Bound(self, var):
        return _pywrapcp.Assignment_Bound(self, var)

    def SetMin(self, var, m):
        return _pywrapcp.Assignment_SetMin(self, var, m)

    def SetMax(self, var, m):
        return _pywrapcp.Assignment_SetMax(self, var, m)

    def SetRange(self, var, l, u):
        return _pywrapcp.Assignment_SetRange(self, var, l, u)

    def SetValue(self, var, value):
        return _pywrapcp.Assignment_SetValue(self, var, value)

    def StartMin(self, var):
        return _pywrapcp.Assignment_StartMin(self, var)

    def StartMax(self, var):
        return _pywrapcp.Assignment_StartMax(self, var)

    def StartValue(self, var):
        return _pywrapcp.Assignment_StartValue(self, var)

    def DurationMin(self, var):
        return _pywrapcp.Assignment_DurationMin(self, var)

    def DurationMax(self, var):
        return _pywrapcp.Assignment_DurationMax(self, var)

    def DurationValue(self, var):
        return _pywrapcp.Assignment_DurationValue(self, var)

    def EndMin(self, var):
        return _pywrapcp.Assignment_EndMin(self, var)

    def EndMax(self, var):
        return _pywrapcp.Assignment_EndMax(self, var)

    def EndValue(self, var):
        return _pywrapcp.Assignment_EndValue(self, var)

    def PerformedMin(self, var):
        return _pywrapcp.Assignment_PerformedMin(self, var)

    def PerformedMax(self, var):
        return _pywrapcp.Assignment_PerformedMax(self, var)

    def PerformedValue(self, var):
        return _pywrapcp.Assignment_PerformedValue(self, var)

    def SetStartMin(self, var, m):
        return _pywrapcp.Assignment_SetStartMin(self, var, m)

    def SetStartMax(self, var, m):
        return _pywrapcp.Assignment_SetStartMax(self, var, m)

    def SetStartRange(self, var, mi, ma):
        return _pywrapcp.Assignment_SetStartRange(self, var, mi, ma)

    def SetStartValue(self, var, value):
        return _pywrapcp.Assignment_SetStartValue(self, var, value)

    def SetDurationMin(self, var, m):
        return _pywrapcp.Assignment_SetDurationMin(self, var, m)

    def SetDurationMax(self, var, m):
        return _pywrapcp.Assignment_SetDurationMax(self, var, m)

    def SetDurationRange(self, var, mi, ma):
        return _pywrapcp.Assignment_SetDurationRange(self, var, mi, ma)

    def SetDurationValue(self, var, value):
        return _pywrapcp.Assignment_SetDurationValue(self, var, value)

    def SetEndMin(self, var, m):
        return _pywrapcp.Assignment_SetEndMin(self, var, m)

    def SetEndMax(self, var, m):
        return _pywrapcp.Assignment_SetEndMax(self, var, m)

    def SetEndRange(self, var, mi, ma):
        return _pywrapcp.Assignment_SetEndRange(self, var, mi, ma)

    def SetEndValue(self, var, value):
        return _pywrapcp.Assignment_SetEndValue(self, var, value)

    def SetPerformedMin(self, var, m):
        return _pywrapcp.Assignment_SetPerformedMin(self, var, m)

    def SetPerformedMax(self, var, m):
        return _pywrapcp.Assignment_SetPerformedMax(self, var, m)

    def SetPerformedRange(self, var, mi, ma):
        return _pywrapcp.Assignment_SetPerformedRange(self, var, mi, ma)

    def SetPerformedValue(self, var, value):
        return _pywrapcp.Assignment_SetPerformedValue(self, var, value)

    def Add(self, *args):
        return _pywrapcp.Assignment_Add(self, *args)

    def ForwardSequence(self, var):
        return _pywrapcp.Assignment_ForwardSequence(self, var)

    def BackwardSequence(self, var):
        return _pywrapcp.Assignment_BackwardSequence(self, var)

    def Unperformed(self, var):
        return _pywrapcp.Assignment_Unperformed(self, var)

    def SetSequence(self, var, forward_sequence, backward_sequence, unperformed):
        return _pywrapcp.Assignment_SetSequence(self, var, forward_sequence, backward_sequence, unperformed)

    def SetForwardSequence(self, var, forward_sequence):
        return _pywrapcp.Assignment_SetForwardSequence(self, var, forward_sequence)

    def SetBackwardSequence(self, var, backward_sequence):
        return _pywrapcp.Assignment_SetBackwardSequence(self, var, backward_sequence)

    def SetUnperformed(self, var, unperformed):
        return _pywrapcp.Assignment_SetUnperformed(self, var, unperformed)

    def Activate(self, *args):
        return _pywrapcp.Assignment_Activate(self, *args)

    def Deactivate(self, *args):
        return _pywrapcp.Assignment_Deactivate(self, *args)

    def Activated(self, *args):
        return _pywrapcp.Assignment_Activated(self, *args)

    def DebugString(self):
        return _pywrapcp.Assignment_DebugString(self)

    def IntVarContainer(self):
        return _pywrapcp.Assignment_IntVarContainer(self)

    def MutableIntVarContainer(self):
        return _pywrapcp.Assignment_MutableIntVarContainer(self)

    def IntervalVarContainer(self):
        return _pywrapcp.Assignment_IntervalVarContainer(self)

    def MutableIntervalVarContainer(self):
        return _pywrapcp.Assignment_MutableIntervalVarContainer(self)

    def SequenceVarContainer(self):
        return _pywrapcp.Assignment_SequenceVarContainer(self)

    def MutableSequenceVarContainer(self):
        return _pywrapcp.Assignment_MutableSequenceVarContainer(self)

    def __eq__(self, assignment):
        return _pywrapcp.Assignment___eq__(self, assignment)

    def __ne__(self, assignment):
        return _pywrapcp.Assignment___ne__(self, assignment)
Assignment_swigregister = _pywrapcp.Assignment_swigregister
Assignment_swigregister(Assignment)


def __lshift__(*args):
    return _pywrapcp.__lshift__(*args)
__lshift__ = _pywrapcp.__lshift__
class Pack(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pack, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pack, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def AddWeightedSumLessOrEqualConstantDimension(self, *args):
        return _pywrapcp.Pack_AddWeightedSumLessOrEqualConstantDimension(self, *args)

    def AddWeightedSumEqualVarDimension(self, *args):
        return _pywrapcp.Pack_AddWeightedSumEqualVarDimension(self, *args)

    def AddSumVariableWeightsLessOrEqualConstantDimension(self, usage, capacity):
        return _pywrapcp.Pack_AddSumVariableWeightsLessOrEqualConstantDimension(self, usage, capacity)

    def AddWeightedSumOfAssignedDimension(self, weights, cost_var):
        return _pywrapcp.Pack_AddWeightedSumOfAssignedDimension(self, weights, cost_var)

    def AddCountUsedBinDimension(self, count_var):
        return _pywrapcp.Pack_AddCountUsedBinDimension(self, count_var)

    def AddCountAssignedItemsDimension(self, count_var):
        return _pywrapcp.Pack_AddCountAssignedItemsDimension(self, count_var)

    def Post(self):
        return _pywrapcp.Pack_Post(self)

    def InitialPropagateWrapper(self):
        return _pywrapcp.Pack_InitialPropagateWrapper(self)

    def DebugString(self):
        return _pywrapcp.Pack_DebugString(self)
Pack_swigregister = _pywrapcp.Pack_swigregister
Pack_swigregister(Pack)

class DisjunctiveConstraint(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DisjunctiveConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DisjunctiveConstraint, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def SequenceVar(self):
        return _pywrapcp.DisjunctiveConstraint_SequenceVar(self)

    def SetTransitionTime(self, transition_time):
        return _pywrapcp.DisjunctiveConstraint_SetTransitionTime(self, transition_time)

    def TransitionTime(self, before_index, after_index):
        return _pywrapcp.DisjunctiveConstraint_TransitionTime(self, before_index, after_index)
DisjunctiveConstraint_swigregister = _pywrapcp.DisjunctiveConstraint_swigregister
DisjunctiveConstraint_swigregister(DisjunctiveConstraint)

class RevInteger(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RevInteger, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RevInteger, name)
    __repr__ = _swig_repr

    def __init__(self, val):
        this = _pywrapcp.new_RevInteger(val)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self):
        return _pywrapcp.RevInteger_Value(self)

    def SetValue(self, s, val):
        return _pywrapcp.RevInteger_SetValue(self, s, val)
    __swig_destroy__ = _pywrapcp.delete_RevInteger
    __del__ = lambda self: None
RevInteger_swigregister = _pywrapcp.RevInteger_swigregister
RevInteger_swigregister(RevInteger)

class NumericalRevInteger(RevInteger):
    __swig_setmethods__ = {}
    for _s in [RevInteger]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumericalRevInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [RevInteger]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumericalRevInteger, name)
    __repr__ = _swig_repr

    def __init__(self, val):
        this = _pywrapcp.new_NumericalRevInteger(val)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, s, to_add):
        return _pywrapcp.NumericalRevInteger_Add(self, s, to_add)

    def Incr(self, s):
        return _pywrapcp.NumericalRevInteger_Incr(self, s)

    def Decr(self, s):
        return _pywrapcp.NumericalRevInteger_Decr(self, s)
    __swig_destroy__ = _pywrapcp.delete_NumericalRevInteger
    __del__ = lambda self: None
NumericalRevInteger_swigregister = _pywrapcp.NumericalRevInteger_swigregister
NumericalRevInteger_swigregister(NumericalRevInteger)

class RevBool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RevBool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RevBool, name)
    __repr__ = _swig_repr

    def __init__(self, val):
        this = _pywrapcp.new_RevBool(val)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Value(self):
        return _pywrapcp.RevBool_Value(self)

    def SetValue(self, s, val):
        return _pywrapcp.RevBool_SetValue(self, s, val)
    __swig_destroy__ = _pywrapcp.delete_RevBool
    __del__ = lambda self: None
RevBool_swigregister = _pywrapcp.RevBool_swigregister
RevBool_swigregister(RevBool)

class IntVarContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarContainer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Contains(self, var):
        return _pywrapcp.IntVarContainer_Contains(self, var)

    def Element(self, index):
        return _pywrapcp.IntVarContainer_Element(self, index)

    def Size(self):
        return _pywrapcp.IntVarContainer_Size(self)

    def Store(self):
        return _pywrapcp.IntVarContainer_Store(self)

    def Restore(self):
        return _pywrapcp.IntVarContainer_Restore(self)

    def __eq__(self, container):
        return _pywrapcp.IntVarContainer___eq__(self, container)

    def __ne__(self, container):
        return _pywrapcp.IntVarContainer___ne__(self, container)
    __swig_destroy__ = _pywrapcp.delete_IntVarContainer
    __del__ = lambda self: None
IntVarContainer_swigregister = _pywrapcp.IntVarContainer_swigregister
IntVarContainer_swigregister(IntVarContainer)

class IntervalVarContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntervalVarContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntervalVarContainer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Contains(self, var):
        return _pywrapcp.IntervalVarContainer_Contains(self, var)

    def Element(self, index):
        return _pywrapcp.IntervalVarContainer_Element(self, index)

    def Size(self):
        return _pywrapcp.IntervalVarContainer_Size(self)

    def Store(self):
        return _pywrapcp.IntervalVarContainer_Store(self)

    def Restore(self):
        return _pywrapcp.IntervalVarContainer_Restore(self)

    def __eq__(self, container):
        return _pywrapcp.IntervalVarContainer___eq__(self, container)

    def __ne__(self, container):
        return _pywrapcp.IntervalVarContainer___ne__(self, container)
    __swig_destroy__ = _pywrapcp.delete_IntervalVarContainer
    __del__ = lambda self: None
IntervalVarContainer_swigregister = _pywrapcp.IntervalVarContainer_swigregister
IntervalVarContainer_swigregister(IntervalVarContainer)

class SequenceVarContainer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceVarContainer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceVarContainer, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Contains(self, var):
        return _pywrapcp.SequenceVarContainer_Contains(self, var)

    def Element(self, index):
        return _pywrapcp.SequenceVarContainer_Element(self, index)

    def Size(self):
        return _pywrapcp.SequenceVarContainer_Size(self)

    def Store(self):
        return _pywrapcp.SequenceVarContainer_Store(self)

    def Restore(self):
        return _pywrapcp.SequenceVarContainer_Restore(self)

    def __eq__(self, container):
        return _pywrapcp.SequenceVarContainer___eq__(self, container)

    def __ne__(self, container):
        return _pywrapcp.SequenceVarContainer___ne__(self, container)
    __swig_destroy__ = _pywrapcp.delete_SequenceVarContainer
    __del__ = lambda self: None
SequenceVarContainer_swigregister = _pywrapcp.SequenceVarContainer_swigregister
SequenceVarContainer_swigregister(SequenceVarContainer)

class LocalSearchOperator(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalSearchOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalSearchOperator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def NextNeighbor(self, delta, deltadelta):
        return _pywrapcp.LocalSearchOperator_NextNeighbor(self, delta, deltadelta)

    def Start(self, assignment):
        return _pywrapcp.LocalSearchOperator_Start(self, assignment)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_LocalSearchOperator(self)
        return weakref_proxy(self)
LocalSearchOperator_swigregister = _pywrapcp.LocalSearchOperator_swigregister
LocalSearchOperator_swigregister(LocalSearchOperator)

class IntVarLocalSearchOperatorTemplate(LocalSearchOperator):
    __swig_setmethods__ = {}
    for _s in [LocalSearchOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarLocalSearchOperatorTemplate, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalSearchOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarLocalSearchOperatorTemplate, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Start(self, assignment):
        return _pywrapcp.IntVarLocalSearchOperatorTemplate_Start(self, assignment)

    def IsIncremental(self):
        return _pywrapcp.IntVarLocalSearchOperatorTemplate_IsIncremental(self)

    def Size(self):
        return _pywrapcp.IntVarLocalSearchOperatorTemplate_Size(self)

    def Value(self, index):
        return _pywrapcp.IntVarLocalSearchOperatorTemplate_Value(self, index)

    def OldValue(self, index):
        return _pywrapcp.IntVarLocalSearchOperatorTemplate_OldValue(self, index)

    def SetValue(self, index, value):
        return _pywrapcp.IntVarLocalSearchOperatorTemplate_SetValue(self, index, value)

    def OnStart(self):
        return _pywrapcp.IntVarLocalSearchOperatorTemplate_OnStart(self)
IntVarLocalSearchOperatorTemplate_swigregister = _pywrapcp.IntVarLocalSearchOperatorTemplate_swigregister
IntVarLocalSearchOperatorTemplate_swigregister(IntVarLocalSearchOperatorTemplate)

class IntVarLocalSearchOperator(IntVarLocalSearchOperatorTemplate):
    __swig_setmethods__ = {}
    for _s in [IntVarLocalSearchOperatorTemplate]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarLocalSearchOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVarLocalSearchOperatorTemplate]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarLocalSearchOperator, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == IntVarLocalSearchOperator:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_IntVarLocalSearchOperator(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_IntVarLocalSearchOperator
    __del__ = lambda self: None

    def NextNeighbor(self, delta, deltadelta):
        return _pywrapcp.IntVarLocalSearchOperator_NextNeighbor(self, delta, deltadelta)

    def OneNeighbor(self):
        return _pywrapcp.IntVarLocalSearchOperator_OneNeighbor(self)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_IntVarLocalSearchOperator(self)
        return weakref_proxy(self)
IntVarLocalSearchOperator_swigregister = _pywrapcp.IntVarLocalSearchOperator_swigregister
IntVarLocalSearchOperator_swigregister(IntVarLocalSearchOperator)

class SequenceVarLocalSearchOperatorTemplate(LocalSearchOperator):
    __swig_setmethods__ = {}
    for _s in [LocalSearchOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceVarLocalSearchOperatorTemplate, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalSearchOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceVarLocalSearchOperatorTemplate, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Start(self, assignment):
        return _pywrapcp.SequenceVarLocalSearchOperatorTemplate_Start(self, assignment)

    def IsIncremental(self):
        return _pywrapcp.SequenceVarLocalSearchOperatorTemplate_IsIncremental(self)

    def Size(self):
        return _pywrapcp.SequenceVarLocalSearchOperatorTemplate_Size(self)

    def Value(self, index):
        return _pywrapcp.SequenceVarLocalSearchOperatorTemplate_Value(self, index)

    def OldValue(self, index):
        return _pywrapcp.SequenceVarLocalSearchOperatorTemplate_OldValue(self, index)

    def SetValue(self, index, value):
        return _pywrapcp.SequenceVarLocalSearchOperatorTemplate_SetValue(self, index, value)

    def OnStart(self):
        return _pywrapcp.SequenceVarLocalSearchOperatorTemplate_OnStart(self)
SequenceVarLocalSearchOperatorTemplate_swigregister = _pywrapcp.SequenceVarLocalSearchOperatorTemplate_swigregister
SequenceVarLocalSearchOperatorTemplate_swigregister(SequenceVarLocalSearchOperatorTemplate)

class SequenceVarLocalSearchOperator(SequenceVarLocalSearchOperatorTemplate):
    __swig_setmethods__ = {}
    for _s in [SequenceVarLocalSearchOperatorTemplate]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequenceVarLocalSearchOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [SequenceVarLocalSearchOperatorTemplate]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequenceVarLocalSearchOperator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
SequenceVarLocalSearchOperator_swigregister = _pywrapcp.SequenceVarLocalSearchOperator_swigregister
SequenceVarLocalSearchOperator_swigregister(SequenceVarLocalSearchOperator)

class BaseLns(IntVarLocalSearchOperator):
    __swig_setmethods__ = {}
    for _s in [IntVarLocalSearchOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BaseLns, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVarLocalSearchOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BaseLns, name)
    __repr__ = _swig_repr

    def __init__(self, vars):
        if self.__class__ == BaseLns:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_BaseLns(_self, vars)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_BaseLns
    __del__ = lambda self: None

    def InitFragments(self):
        return _pywrapcp.BaseLns_InitFragments(self)

    def NextFragment(self):
        return _pywrapcp.BaseLns_NextFragment(self)

    def AppendToFragment(self, index):
        return _pywrapcp.BaseLns_AppendToFragment(self, index)

    def FragmentSize(self):
        return _pywrapcp.BaseLns_FragmentSize(self)

    def __getitem__(self, index):
        return _pywrapcp.BaseLns___getitem__(self, index)

    def __len__(self):
        return _pywrapcp.BaseLns___len__(self)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_BaseLns(self)
        return weakref_proxy(self)
BaseLns_swigregister = _pywrapcp.BaseLns_swigregister
BaseLns_swigregister(BaseLns)

class ChangeValue(IntVarLocalSearchOperator):
    __swig_setmethods__ = {}
    for _s in [IntVarLocalSearchOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChangeValue, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVarLocalSearchOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChangeValue, name)
    __repr__ = _swig_repr

    def __init__(self, vars):
        if self.__class__ == ChangeValue:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_ChangeValue(_self, vars)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_ChangeValue
    __del__ = lambda self: None

    def ModifyValue(self, index, value):
        return _pywrapcp.ChangeValue_ModifyValue(self, index, value)

    def OneNeighbor(self):
        return _pywrapcp.ChangeValue_OneNeighbor(self)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_ChangeValue(self)
        return weakref_proxy(self)
ChangeValue_swigregister = _pywrapcp.ChangeValue_swigregister
ChangeValue_swigregister(ChangeValue)

class PathOperator(IntVarLocalSearchOperator):
    __swig_setmethods__ = {}
    for _s in [IntVarLocalSearchOperator]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathOperator, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVarLocalSearchOperator]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathOperator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Neighbor(self):
        return _pywrapcp.PathOperator_Neighbor(self)
PathOperator_swigregister = _pywrapcp.PathOperator_swigregister
PathOperator_swigregister(PathOperator)

class LocalSearchFilter(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalSearchFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalSearchFilter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Accept(self, delta, deltadelta):
        return _pywrapcp.LocalSearchFilter_Accept(self, delta, deltadelta)

    def Synchronize(self, assignment, delta):
        return _pywrapcp.LocalSearchFilter_Synchronize(self, assignment, delta)

    def IsIncremental(self):
        return _pywrapcp.LocalSearchFilter_IsIncremental(self)
    __swig_destroy__ = _pywrapcp.delete_LocalSearchFilter
    __del__ = lambda self: None
LocalSearchFilter_swigregister = _pywrapcp.LocalSearchFilter_swigregister
LocalSearchFilter_swigregister(LocalSearchFilter)

class IntVarLocalSearchFilter(LocalSearchFilter):
    __swig_setmethods__ = {}
    for _s in [LocalSearchFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarLocalSearchFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [LocalSearchFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarLocalSearchFilter, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == IntVarLocalSearchFilter:
            _self = None
        else:
            _self = self
        this = _pywrapcp.new_IntVarLocalSearchFilter(_self, *args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_IntVarLocalSearchFilter
    __del__ = lambda self: None

    def Synchronize(self, assignment, delta):
        return _pywrapcp.IntVarLocalSearchFilter_Synchronize(self, assignment, delta)

    def Size(self):
        return _pywrapcp.IntVarLocalSearchFilter_Size(self)

    def Value(self, index):
        return _pywrapcp.IntVarLocalSearchFilter_Value(self, index)

    def IndexFromVar(self, var):
        return _pywrapcp.IntVarLocalSearchFilter_IndexFromVar(self, var)
    def __disown__(self):
        self.this.disown()
        _pywrapcp.disown_IntVarLocalSearchFilter(self)
        return weakref_proxy(self)
IntVarLocalSearchFilter_swigregister = _pywrapcp.IntVarLocalSearchFilter_swigregister
IntVarLocalSearchFilter_swigregister(IntVarLocalSearchFilter)

class BooleanVar(IntVar):
    __swig_setmethods__ = {}
    for _s in [IntVar]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BooleanVar, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVar]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BooleanVar, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Min(self):
        return _pywrapcp.BooleanVar_Min(self)

    def SetMin(self, m):
        return _pywrapcp.BooleanVar_SetMin(self, m)

    def Max(self):
        return _pywrapcp.BooleanVar_Max(self)

    def SetMax(self, m):
        return _pywrapcp.BooleanVar_SetMax(self, m)

    def SetRange(self, mi, ma):
        return _pywrapcp.BooleanVar_SetRange(self, mi, ma)

    def Bound(self):
        return _pywrapcp.BooleanVar_Bound(self)

    def Value(self):
        return _pywrapcp.BooleanVar_Value(self)

    def RemoveValue(self, v):
        return _pywrapcp.BooleanVar_RemoveValue(self, v)

    def RemoveInterval(self, l, u):
        return _pywrapcp.BooleanVar_RemoveInterval(self, l, u)

    def WhenBound(self, d):
        return _pywrapcp.BooleanVar_WhenBound(self, d)

    def WhenRange(self, d):
        return _pywrapcp.BooleanVar_WhenRange(self, d)

    def WhenDomain(self, d):
        return _pywrapcp.BooleanVar_WhenDomain(self, d)

    def Size(self):
        return _pywrapcp.BooleanVar_Size(self)

    def Contains(self, v):
        return _pywrapcp.BooleanVar_Contains(self, v)

    def HoleIteratorAux(self, reversible):
        return _pywrapcp.BooleanVar_HoleIteratorAux(self, reversible)

    def DomainIteratorAux(self, reversible):
        return _pywrapcp.BooleanVar_DomainIteratorAux(self, reversible)

    def DebugString(self):
        return _pywrapcp.BooleanVar_DebugString(self)
BooleanVar_swigregister = _pywrapcp.BooleanVar_swigregister
BooleanVar_swigregister(BooleanVar)


class PyDecision(Decision):

  def __init__(self):
    Decision.__init__(self)

  def ApplyWrapper(self, solver):
    try:
       self.Apply(solver)
    except Exception as e:
      if 'CP Solver fail' in str(e):
        solver.ShouldFail()
      else:
        raise

  def RefuteWrapper(self, solver):
    try:
       self.Refute(solver)
    except Exception as e:
      if 'CP Solver fail' in str(e):
        solver.ShouldFail()
      else:
        raise

  def DebugString(self):
    return "PyDecision"


class PyDecisionBuilder(DecisionBuilder):

  def __init__(self):
    DecisionBuilder.__init__(self)

  def NextWrapper(self, solver):
    try:
      return self.Next(solver)
    except Exception as e:
      if 'CP Solver fail' in str(e):
        return solver.FailDecision()
      else:
        raise

  def DebugString(self):
    return "PyDecisionBuilder"


class PyDemon(Demon):

  def RunWrapper(self, solver):
    try:
      self.Run(solver)
    except Exception as e:
      if 'CP Solver fail' in str(e):
        solver.ShouldFail()
      else:
        raise

  def DebugString(self):
    return "PyDemon"


class PyConstraintDemon(PyDemon):

  def __init__(self, ct, method, delayed, *args):
    PyDemon.__init__(self)
    self.__constraint = ct
    self.__method = method
    self.__delayed = delayed
    self.__args = args

  def Run(self, solver):
    self.__method(self.__constraint, *self.__args)

  def Priority(self):
    return Solver.DELAYED_PRIORITY if self.__delayed else Solver.NORMAL_PRIORITY

  def DebugString(self):
    return 'PyConstraintDemon'


class PyConstraint(Constraint):

  def __init__(self, solver):
    Constraint.__init__(self, solver)
    self.__demons = []

  def Demon(self, method, *args):
    demon = PyConstraintDemon(self, method, False, *args)
    self.__demons.append(demon)
    return demon

  def DelayedDemon(self, method, *args):
    demon = PyConstraintDemon(self, method, True, *args)
    self.__demons.append(demon)
    return demon

  def InitialPropagateDemon(self):
    return self.solver().ConstraintInitialPropagateCallback(self)

  def DelayedInitialPropagateDemon(self):
    return self.solver().DelayedConstraintInitialPropagateCallback(self)

  def InitialPropagateWrapper(self):
    try:
      self.InitialPropagate()
    except Exception as e:
      if 'CP Solver fail' in str(e):
        self.solver().ShouldFail()
      else:
        raise

  def DebugString(self):
    return "PyConstraint"



class RoutingIndexManager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingIndexManager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingIndexManager, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _pywrapcp.new_RoutingIndexManager(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_RoutingIndexManager
    __del__ = lambda self: None

    def GetNumberOfNodes(self):
        return _pywrapcp.RoutingIndexManager_GetNumberOfNodes(self)

    def GetNumberOfVehicles(self):
        return _pywrapcp.RoutingIndexManager_GetNumberOfVehicles(self)

    def GetNumberOfIndices(self):
        return _pywrapcp.RoutingIndexManager_GetNumberOfIndices(self)

    def NodeToIndex(self, node):
        return _pywrapcp.RoutingIndexManager_NodeToIndex(self, node)

    def IndexToNode(self, index):
        return _pywrapcp.RoutingIndexManager_IndexToNode(self, index)
RoutingIndexManager_swigregister = _pywrapcp.RoutingIndexManager_swigregister
RoutingIndexManager_swigregister(RoutingIndexManager)


def DefaultRoutingModelParameters():
    return _pywrapcp.DefaultRoutingModelParameters()
DefaultRoutingModelParameters = _pywrapcp.DefaultRoutingModelParameters

def DefaultRoutingSearchParameters():
    return _pywrapcp.DefaultRoutingSearchParameters()
DefaultRoutingSearchParameters = _pywrapcp.DefaultRoutingSearchParameters

def FindErrorInRoutingSearchParameters(search_parameters):
    return _pywrapcp.FindErrorInRoutingSearchParameters(search_parameters)
FindErrorInRoutingSearchParameters = _pywrapcp.FindErrorInRoutingSearchParameters
BOOL_UNSPECIFIED = _pywrapcp.BOOL_UNSPECIFIED
BOOL_FALSE = _pywrapcp.BOOL_FALSE
BOOL_TRUE = _pywrapcp.BOOL_TRUE
class RoutingModel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingModel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingModel, name)
    __repr__ = _swig_repr
    ROUTING_NOT_SOLVED = _pywrapcp.RoutingModel_ROUTING_NOT_SOLVED
    ROUTING_SUCCESS = _pywrapcp.RoutingModel_ROUTING_SUCCESS
    ROUTING_FAIL = _pywrapcp.RoutingModel_ROUTING_FAIL
    ROUTING_FAIL_TIMEOUT = _pywrapcp.RoutingModel_ROUTING_FAIL_TIMEOUT
    ROUTING_INVALID = _pywrapcp.RoutingModel_ROUTING_INVALID
    PICKUP_AND_DELIVERY_NO_ORDER = _pywrapcp.RoutingModel_PICKUP_AND_DELIVERY_NO_ORDER
    PICKUP_AND_DELIVERY_LIFO = _pywrapcp.RoutingModel_PICKUP_AND_DELIVERY_LIFO
    PICKUP_AND_DELIVERY_FIFO = _pywrapcp.RoutingModel_PICKUP_AND_DELIVERY_FIFO

    def __init__(self, *args):
        this = _pywrapcp.new_RoutingModel(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_RoutingModel
    __del__ = lambda self: None

    def RegisterUnaryTransitCallback(self, callback):
        return _pywrapcp.RoutingModel_RegisterUnaryTransitCallback(self, callback)

    def RegisterTransitCallback(self, callback):
        return _pywrapcp.RoutingModel_RegisterTransitCallback(self, callback)

    def RegisterPositiveTransitCallback(self, callback):
        return _pywrapcp.RoutingModel_RegisterPositiveTransitCallback(self, callback)

    def TransitCallback(self, callback_index):
        return _pywrapcp.RoutingModel_TransitCallback(self, callback_index)

    def UnaryTransitCallbackOrNull(self, callback_index):
        return _pywrapcp.RoutingModel_UnaryTransitCallbackOrNull(self, callback_index)

    def AddDimension(self, evaluator_index, slack_max, capacity, fix_start_cumul_to_zero, name):
        return _pywrapcp.RoutingModel_AddDimension(self, evaluator_index, slack_max, capacity, fix_start_cumul_to_zero, name)

    def AddDimensionWithVehicleTransits(self, evaluator_indices, slack_max, capacity, fix_start_cumul_to_zero, name):
        return _pywrapcp.RoutingModel_AddDimensionWithVehicleTransits(self, evaluator_indices, slack_max, capacity, fix_start_cumul_to_zero, name)

    def AddDimensionWithVehicleCapacity(self, evaluator_index, slack_max, vehicle_capacities, fix_start_cumul_to_zero, name):
        return _pywrapcp.RoutingModel_AddDimensionWithVehicleCapacity(self, evaluator_index, slack_max, vehicle_capacities, fix_start_cumul_to_zero, name)

    def AddDimensionWithVehicleTransitAndCapacity(self, evaluator_indices, slack_max, vehicle_capacities, fix_start_cumul_to_zero, name):
        return _pywrapcp.RoutingModel_AddDimensionWithVehicleTransitAndCapacity(self, evaluator_indices, slack_max, vehicle_capacities, fix_start_cumul_to_zero, name)

    def AddConstantDimensionWithSlack(self, value, capacity, slack_max, fix_start_cumul_to_zero, name):
        return _pywrapcp.RoutingModel_AddConstantDimensionWithSlack(self, value, capacity, slack_max, fix_start_cumul_to_zero, name)

    def AddConstantDimension(self, value, capacity, fix_start_cumul_to_zero, name):
        return _pywrapcp.RoutingModel_AddConstantDimension(self, value, capacity, fix_start_cumul_to_zero, name)

    def AddVectorDimension(self, values, capacity, fix_start_cumul_to_zero, name):
        return _pywrapcp.RoutingModel_AddVectorDimension(self, values, capacity, fix_start_cumul_to_zero, name)

    def MakePathSlacks(self, dimension, total_slacks):
        return _pywrapcp.RoutingModel_MakePathSlacks(self, dimension, total_slacks)

    def GetAllDimensionNames(self):
        return _pywrapcp.RoutingModel_GetAllDimensionNames(self)

    def GetDimensions(self):
        return _pywrapcp.RoutingModel_GetDimensions(self)

    def GetDimensionsWithSoftOrSpanCosts(self):
        return _pywrapcp.RoutingModel_GetDimensionsWithSoftOrSpanCosts(self)

    def GetDimensionsForGlobalCumulOptimizers(self):
        return _pywrapcp.RoutingModel_GetDimensionsForGlobalCumulOptimizers(self)

    def GetDimensionsForLocalCumulOptimizers(self):
        return _pywrapcp.RoutingModel_GetDimensionsForLocalCumulOptimizers(self)

    def HasDimension(self, dimension_name):
        return _pywrapcp.RoutingModel_HasDimension(self, dimension_name)

    def GetDimensionOrDie(self, dimension_name):
        return _pywrapcp.RoutingModel_GetDimensionOrDie(self, dimension_name)

    def GetMutableDimension(self, dimension_name):
        return _pywrapcp.RoutingModel_GetMutableDimension(self, dimension_name)

    def SetPrimaryConstrainedDimension(self, dimension_name):
        return _pywrapcp.RoutingModel_SetPrimaryConstrainedDimension(self, dimension_name)

    def GetPrimaryConstrainedDimension(self):
        return _pywrapcp.RoutingModel_GetPrimaryConstrainedDimension(self)

    def AddDisjunction(self, *args):
        return _pywrapcp.RoutingModel_AddDisjunction(self, *args)

    def GetDisjunctionIndices(self, index):
        return _pywrapcp.RoutingModel_GetDisjunctionIndices(self, index)

    def GetDisjunctionPenalty(self, index):
        return _pywrapcp.RoutingModel_GetDisjunctionPenalty(self, index)

    def GetDisjunctionMaxCardinality(self, index):
        return _pywrapcp.RoutingModel_GetDisjunctionMaxCardinality(self, index)

    def GetNumberOfDisjunctions(self):
        return _pywrapcp.RoutingModel_GetNumberOfDisjunctions(self)

    def GetPerfectBinaryDisjunctions(self):
        return _pywrapcp.RoutingModel_GetPerfectBinaryDisjunctions(self)

    def IgnoreDisjunctionsAlreadyForcedToZero(self):
        return _pywrapcp.RoutingModel_IgnoreDisjunctionsAlreadyForcedToZero(self)

    def AddSoftSameVehicleConstraint(self, indices, cost):
        return _pywrapcp.RoutingModel_AddSoftSameVehicleConstraint(self, indices, cost)

    def SetAllowedVehiclesForIndex(self, vehicles, index):
        return _pywrapcp.RoutingModel_SetAllowedVehiclesForIndex(self, vehicles, index)

    def IsVehicleAllowedForIndex(self, vehicle, index):
        return _pywrapcp.RoutingModel_IsVehicleAllowedForIndex(self, vehicle, index)

    def AddPickupAndDelivery(self, pickup, delivery):
        return _pywrapcp.RoutingModel_AddPickupAndDelivery(self, pickup, delivery)

    def AddPickupAndDeliverySets(self, pickup_disjunction, delivery_disjunction):
        return _pywrapcp.RoutingModel_AddPickupAndDeliverySets(self, pickup_disjunction, delivery_disjunction)

    def GetPickupIndexPairs(self, node_index):
        return _pywrapcp.RoutingModel_GetPickupIndexPairs(self, node_index)

    def GetDeliveryIndexPairs(self, node_index):
        return _pywrapcp.RoutingModel_GetDeliveryIndexPairs(self, node_index)

    def SetPickupAndDeliveryPolicyOfAllVehicles(self, policy):
        return _pywrapcp.RoutingModel_SetPickupAndDeliveryPolicyOfAllVehicles(self, policy)

    def SetPickupAndDeliveryPolicyOfVehicle(self, policy, vehicle):
        return _pywrapcp.RoutingModel_SetPickupAndDeliveryPolicyOfVehicle(self, policy, vehicle)

    def GetPickupAndDeliveryPolicyOfVehicle(self, vehicle):
        return _pywrapcp.RoutingModel_GetPickupAndDeliveryPolicyOfVehicle(self, vehicle)

    def GetNumOfSingletonNodes(self):
        return _pywrapcp.RoutingModel_GetNumOfSingletonNodes(self)

    def SetVisitType(self, index, type):
        return _pywrapcp.RoutingModel_SetVisitType(self, index, type)

    def GetVisitType(self, index):
        return _pywrapcp.RoutingModel_GetVisitType(self, index)

    def CloseVisitTypes(self):
        return _pywrapcp.RoutingModel_CloseVisitTypes(self)

    def GetNumberOfVisitTypes(self):
        return _pywrapcp.RoutingModel_GetNumberOfVisitTypes(self)

    def AddHardTypeIncompatibility(self, type1, type2):
        return _pywrapcp.RoutingModel_AddHardTypeIncompatibility(self, type1, type2)

    def AddTemporalTypeIncompatibility(self, type1, type2):
        return _pywrapcp.RoutingModel_AddTemporalTypeIncompatibility(self, type1, type2)

    def GetHardTypeIncompatibilitiesOfType(self, type):
        return _pywrapcp.RoutingModel_GetHardTypeIncompatibilitiesOfType(self, type)

    def GetTemporalTypeIncompatibilitiesOfType(self, type):
        return _pywrapcp.RoutingModel_GetTemporalTypeIncompatibilitiesOfType(self, type)

    def HasHardTypeIncompatibilities(self):
        return _pywrapcp.RoutingModel_HasHardTypeIncompatibilities(self)

    def HasTemporalTypeIncompatibilities(self):
        return _pywrapcp.RoutingModel_HasTemporalTypeIncompatibilities(self)

    def AddTemporalRequiredTypeAlternatives(self, dependent_type, required_type_alternatives):
        return _pywrapcp.RoutingModel_AddTemporalRequiredTypeAlternatives(self, dependent_type, required_type_alternatives)

    def GetTemporalRequiredTypeAlternativesOfType(self, type):
        return _pywrapcp.RoutingModel_GetTemporalRequiredTypeAlternativesOfType(self, type)

    def HasTemporalTypeRequirements(self):
        return _pywrapcp.RoutingModel_HasTemporalTypeRequirements(self)

    def HasTypeRegulations(self):
        return _pywrapcp.RoutingModel_HasTypeRegulations(self)

    def UnperformedPenalty(self, var_index):
        return _pywrapcp.RoutingModel_UnperformedPenalty(self, var_index)

    def UnperformedPenaltyOrValue(self, default_value, var_index):
        return _pywrapcp.RoutingModel_UnperformedPenaltyOrValue(self, default_value, var_index)

    def GetDepot(self):
        return _pywrapcp.RoutingModel_GetDepot(self)

    def SetArcCostEvaluatorOfAllVehicles(self, evaluator_index):
        return _pywrapcp.RoutingModel_SetArcCostEvaluatorOfAllVehicles(self, evaluator_index)

    def SetArcCostEvaluatorOfVehicle(self, evaluator_index, vehicle):
        return _pywrapcp.RoutingModel_SetArcCostEvaluatorOfVehicle(self, evaluator_index, vehicle)

    def SetFixedCostOfAllVehicles(self, cost):
        return _pywrapcp.RoutingModel_SetFixedCostOfAllVehicles(self, cost)

    def SetFixedCostOfVehicle(self, cost, vehicle):
        return _pywrapcp.RoutingModel_SetFixedCostOfVehicle(self, cost, vehicle)

    def GetFixedCostOfVehicle(self, vehicle):
        return _pywrapcp.RoutingModel_GetFixedCostOfVehicle(self, vehicle)

    def SetAmortizedCostFactorsOfAllVehicles(self, linear_cost_factor, quadratic_cost_factor):
        return _pywrapcp.RoutingModel_SetAmortizedCostFactorsOfAllVehicles(self, linear_cost_factor, quadratic_cost_factor)

    def SetAmortizedCostFactorsOfVehicle(self, linear_cost_factor, quadratic_cost_factor, vehicle):
        return _pywrapcp.RoutingModel_SetAmortizedCostFactorsOfVehicle(self, linear_cost_factor, quadratic_cost_factor, vehicle)

    def GetAmortizedLinearCostFactorOfVehicles(self):
        return _pywrapcp.RoutingModel_GetAmortizedLinearCostFactorOfVehicles(self)

    def GetAmortizedQuadraticCostFactorOfVehicles(self):
        return _pywrapcp.RoutingModel_GetAmortizedQuadraticCostFactorOfVehicles(self)

    def ConsiderEmptyRouteCostsForVehicle(self, consider_costs, vehicle):
        return _pywrapcp.RoutingModel_ConsiderEmptyRouteCostsForVehicle(self, consider_costs, vehicle)

    def AreEmptyRouteCostsConsideredForVehicle(self, vehicle):
        return _pywrapcp.RoutingModel_AreEmptyRouteCostsConsideredForVehicle(self, vehicle)

    def SetFirstSolutionEvaluator(self, evaluator):
        return _pywrapcp.RoutingModel_SetFirstSolutionEvaluator(self, evaluator)

    def AddLocalSearchOperator(self, ls_operator):
        return _pywrapcp.RoutingModel_AddLocalSearchOperator(self, ls_operator)

    def AddSearchMonitor(self, monitor):
        return _pywrapcp.RoutingModel_AddSearchMonitor(self, monitor)

    def AddAtSolutionCallback(self, callback):
        return _pywrapcp.RoutingModel_AddAtSolutionCallback(self, callback)

    def AddVariableMinimizedByFinalizer(self, var):
        return _pywrapcp.RoutingModel_AddVariableMinimizedByFinalizer(self, var)

    def AddVariableMaximizedByFinalizer(self, var):
        return _pywrapcp.RoutingModel_AddVariableMaximizedByFinalizer(self, var)

    def CloseModel(self):
        return _pywrapcp.RoutingModel_CloseModel(self)

    def CloseModelWithParameters(self, search_parameters):
        return _pywrapcp.RoutingModel_CloseModelWithParameters(self, search_parameters)

    def Solve(self, assignment=None):
        return _pywrapcp.RoutingModel_Solve(self, assignment)

    def SolveWithParameters(self, search_parameters, solutions=None):
        return _pywrapcp.RoutingModel_SolveWithParameters(self, search_parameters, solutions)

    def SolveFromAssignmentWithParameters(self, assignment, search_parameters, solutions=None):
        return _pywrapcp.RoutingModel_SolveFromAssignmentWithParameters(self, assignment, search_parameters, solutions)

    def SetAssignmentFromOtherModelAssignment(self, target_assignment, source_model, source_assignment):
        return _pywrapcp.RoutingModel_SetAssignmentFromOtherModelAssignment(self, target_assignment, source_model, source_assignment)

    def ComputeLowerBound(self):
        return _pywrapcp.RoutingModel_ComputeLowerBound(self)

    def status(self):
        return _pywrapcp.RoutingModel_status(self)

    def ApplyLocks(self, locks):
        return _pywrapcp.RoutingModel_ApplyLocks(self, locks)

    def ApplyLocksToAllVehicles(self, locks, close_routes):
        return _pywrapcp.RoutingModel_ApplyLocksToAllVehicles(self, locks, close_routes)

    def PreAssignment(self):
        return _pywrapcp.RoutingModel_PreAssignment(self)

    def MutablePreAssignment(self):
        return _pywrapcp.RoutingModel_MutablePreAssignment(self)

    def WriteAssignment(self, file_name):
        return _pywrapcp.RoutingModel_WriteAssignment(self, file_name)

    def ReadAssignment(self, file_name):
        return _pywrapcp.RoutingModel_ReadAssignment(self, file_name)

    def RestoreAssignment(self, solution):
        return _pywrapcp.RoutingModel_RestoreAssignment(self, solution)

    def ReadAssignmentFromRoutes(self, routes, ignore_inactive_indices):
        return _pywrapcp.RoutingModel_ReadAssignmentFromRoutes(self, routes, ignore_inactive_indices)

    def RoutesToAssignment(self, routes, ignore_inactive_indices, close_routes, assignment):
        return _pywrapcp.RoutingModel_RoutesToAssignment(self, routes, ignore_inactive_indices, close_routes, assignment)

    def AssignmentToRoutes(self, assignment, routes):
        return _pywrapcp.RoutingModel_AssignmentToRoutes(self, assignment, routes)

    def CompactAssignment(self, assignment):
        return _pywrapcp.RoutingModel_CompactAssignment(self, assignment)

    def CompactAndCheckAssignment(self, assignment):
        return _pywrapcp.RoutingModel_CompactAndCheckAssignment(self, assignment)

    def AddToAssignment(self, var):
        return _pywrapcp.RoutingModel_AddToAssignment(self, var)

    def AddIntervalToAssignment(self, interval):
        return _pywrapcp.RoutingModel_AddIntervalToAssignment(self, interval)

    def PackCumulsOfGlobalOptimizerDimensionsFromAssignment(self, original_assignment, duration_limit):
        return _pywrapcp.RoutingModel_PackCumulsOfGlobalOptimizerDimensionsFromAssignment(self, original_assignment, duration_limit)

    def AddLocalSearchFilter(self, filter):
        return _pywrapcp.RoutingModel_AddLocalSearchFilter(self, filter)

    def Start(self, vehicle):
        return _pywrapcp.RoutingModel_Start(self, vehicle)

    def End(self, vehicle):
        return _pywrapcp.RoutingModel_End(self, vehicle)

    def IsStart(self, index):
        return _pywrapcp.RoutingModel_IsStart(self, index)

    def IsEnd(self, index):
        return _pywrapcp.RoutingModel_IsEnd(self, index)

    def VehicleIndex(self, index):
        return _pywrapcp.RoutingModel_VehicleIndex(self, index)

    def Next(self, assignment, index):
        return _pywrapcp.RoutingModel_Next(self, assignment, index)

    def IsVehicleUsed(self, assignment, vehicle):
        return _pywrapcp.RoutingModel_IsVehicleUsed(self, assignment, vehicle)

    def NextVar(self, index):
        return _pywrapcp.RoutingModel_NextVar(self, index)

    def ActiveVar(self, index):
        return _pywrapcp.RoutingModel_ActiveVar(self, index)

    def VehicleCostsConsideredVar(self, vehicle):
        return _pywrapcp.RoutingModel_VehicleCostsConsideredVar(self, vehicle)

    def VehicleVar(self, index):
        return _pywrapcp.RoutingModel_VehicleVar(self, index)

    def CostVar(self):
        return _pywrapcp.RoutingModel_CostVar(self)

    def GetArcCostForVehicle(self, from_index, to_index, vehicle):
        return _pywrapcp.RoutingModel_GetArcCostForVehicle(self, from_index, to_index, vehicle)

    def CostsAreHomogeneousAcrossVehicles(self):
        return _pywrapcp.RoutingModel_CostsAreHomogeneousAcrossVehicles(self)

    def GetHomogeneousCost(self, from_index, to_index):
        return _pywrapcp.RoutingModel_GetHomogeneousCost(self, from_index, to_index)

    def GetArcCostForFirstSolution(self, from_index, to_index):
        return _pywrapcp.RoutingModel_GetArcCostForFirstSolution(self, from_index, to_index)

    def GetArcCostForClass(self, from_index, to_index, cost_class_index):
        return _pywrapcp.RoutingModel_GetArcCostForClass(self, from_index, to_index, cost_class_index)

    def GetCostClassIndexOfVehicle(self, vehicle):
        return _pywrapcp.RoutingModel_GetCostClassIndexOfVehicle(self, vehicle)

    def HasVehicleWithCostClassIndex(self, cost_class_index):
        return _pywrapcp.RoutingModel_HasVehicleWithCostClassIndex(self, cost_class_index)

    def GetCostClassesCount(self):
        return _pywrapcp.RoutingModel_GetCostClassesCount(self)

    def GetNonZeroCostClassesCount(self):
        return _pywrapcp.RoutingModel_GetNonZeroCostClassesCount(self)

    def GetVehicleClassIndexOfVehicle(self, vehicle):
        return _pywrapcp.RoutingModel_GetVehicleClassIndexOfVehicle(self, vehicle)

    def GetVehicleClassesCount(self):
        return _pywrapcp.RoutingModel_GetVehicleClassesCount(self)

    def GetSameVehicleIndicesOfIndex(self, node):
        return _pywrapcp.RoutingModel_GetSameVehicleIndicesOfIndex(self, node)

    def ArcIsMoreConstrainedThanArc(self, arg2, to1, to2):
        return _pywrapcp.RoutingModel_ArcIsMoreConstrainedThanArc(self, arg2, to1, to2)

    def DebugOutputAssignment(self, solution_assignment, dimension_to_print):
        return _pywrapcp.RoutingModel_DebugOutputAssignment(self, solution_assignment, dimension_to_print)

    def solver(self):
        return _pywrapcp.RoutingModel_solver(self)

    def CheckLimit(self):
        return _pywrapcp.RoutingModel_CheckLimit(self)

    def RemainingTime(self):
        return _pywrapcp.RoutingModel_RemainingTime(self)

    def nodes(self):
        return _pywrapcp.RoutingModel_nodes(self)

    def vehicles(self):
        return _pywrapcp.RoutingModel_vehicles(self)

    def Size(self):
        return _pywrapcp.RoutingModel_Size(self)

    def GetNumberOfDecisionsInFirstSolution(self, search_parameters):
        return _pywrapcp.RoutingModel_GetNumberOfDecisionsInFirstSolution(self, search_parameters)

    def GetNumberOfRejectsInFirstSolution(self, search_parameters):
        return _pywrapcp.RoutingModel_GetNumberOfRejectsInFirstSolution(self, search_parameters)

    def IsMatchingModel(self):
        return _pywrapcp.RoutingModel_IsMatchingModel(self)

    def MakeGuidedSlackFinalizer(self, dimension, initializer):
        return _pywrapcp.RoutingModel_MakeGuidedSlackFinalizer(self, dimension, initializer)

    def MakeSelfDependentDimensionFinalizer(self, dimension):
        return _pywrapcp.RoutingModel_MakeSelfDependentDimensionFinalizer(self, dimension)

    def AddMatrixDimension(self, *args):
        return _pywrapcp.RoutingModel_AddMatrixDimension(self, *args)
RoutingModel_swigregister = _pywrapcp.RoutingModel_swigregister
RoutingModel_swigregister(RoutingModel)
cvar = _pywrapcp.cvar
RoutingModel.kNoPenalty = _pywrapcp.cvar.RoutingModel_kNoPenalty
RoutingModel.kNoDisjunction = _pywrapcp.cvar.RoutingModel_kNoDisjunction
RoutingModel.kNoDimension = _pywrapcp.cvar.RoutingModel_kNoDimension

class RoutingModelVisitor(BaseObject):
    __swig_setmethods__ = {}
    for _s in [BaseObject]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingModelVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [BaseObject]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingModelVisitor, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _pywrapcp.new_RoutingModelVisitor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_RoutingModelVisitor
    __del__ = lambda self: None
RoutingModelVisitor_swigregister = _pywrapcp.RoutingModelVisitor_swigregister
RoutingModelVisitor_swigregister(RoutingModelVisitor)
RoutingModelVisitor.kLightElement = _pywrapcp.cvar.RoutingModelVisitor_kLightElement
RoutingModelVisitor.kLightElement2 = _pywrapcp.cvar.RoutingModelVisitor_kLightElement2
RoutingModelVisitor.kRemoveValues = _pywrapcp.cvar.RoutingModelVisitor_kRemoveValues

class GlobalVehicleBreaksConstraint(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlobalVehicleBreaksConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GlobalVehicleBreaksConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, dimension):
        this = _pywrapcp.new_GlobalVehicleBreaksConstraint(dimension)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Post(self):
        return _pywrapcp.GlobalVehicleBreaksConstraint_Post(self)

    def InitialPropagateWrapper(self):
        return _pywrapcp.GlobalVehicleBreaksConstraint_InitialPropagateWrapper(self)
    __swig_destroy__ = _pywrapcp.delete_GlobalVehicleBreaksConstraint
    __del__ = lambda self: None
GlobalVehicleBreaksConstraint_swigregister = _pywrapcp.GlobalVehicleBreaksConstraint_swigregister
GlobalVehicleBreaksConstraint_swigregister(GlobalVehicleBreaksConstraint)

class TypeRegulationsChecker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeRegulationsChecker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TypeRegulationsChecker, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_TypeRegulationsChecker
    __del__ = lambda self: None

    def CheckVehicle(self, vehicle, next_accessor):
        return _pywrapcp.TypeRegulationsChecker_CheckVehicle(self, vehicle, next_accessor)
TypeRegulationsChecker_swigregister = _pywrapcp.TypeRegulationsChecker_swigregister
TypeRegulationsChecker_swigregister(TypeRegulationsChecker)

class TypeIncompatibilityChecker(TypeRegulationsChecker):
    __swig_setmethods__ = {}
    for _s in [TypeRegulationsChecker]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeIncompatibilityChecker, name, value)
    __swig_getmethods__ = {}
    for _s in [TypeRegulationsChecker]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeIncompatibilityChecker, name)
    __repr__ = _swig_repr

    def __init__(self, model, check_hard_incompatibilities):
        this = _pywrapcp.new_TypeIncompatibilityChecker(model, check_hard_incompatibilities)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_TypeIncompatibilityChecker
    __del__ = lambda self: None
TypeIncompatibilityChecker_swigregister = _pywrapcp.TypeIncompatibilityChecker_swigregister
TypeIncompatibilityChecker_swigregister(TypeIncompatibilityChecker)

class TypeRequirementChecker(TypeRegulationsChecker):
    __swig_setmethods__ = {}
    for _s in [TypeRegulationsChecker]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeRequirementChecker, name, value)
    __swig_getmethods__ = {}
    for _s in [TypeRegulationsChecker]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeRequirementChecker, name)
    __repr__ = _swig_repr

    def __init__(self, model):
        this = _pywrapcp.new_TypeRequirementChecker(model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_TypeRequirementChecker
    __del__ = lambda self: None
TypeRequirementChecker_swigregister = _pywrapcp.TypeRequirementChecker_swigregister
TypeRequirementChecker_swigregister(TypeRequirementChecker)

class TypeRegulationsConstraint(Constraint):
    __swig_setmethods__ = {}
    for _s in [Constraint]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TypeRegulationsConstraint, name, value)
    __swig_getmethods__ = {}
    for _s in [Constraint]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, TypeRegulationsConstraint, name)
    __repr__ = _swig_repr

    def __init__(self, model):
        this = _pywrapcp.new_TypeRegulationsConstraint(model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Post(self):
        return _pywrapcp.TypeRegulationsConstraint_Post(self)

    def InitialPropagateWrapper(self):
        return _pywrapcp.TypeRegulationsConstraint_InitialPropagateWrapper(self)
    __swig_destroy__ = _pywrapcp.delete_TypeRegulationsConstraint
    __del__ = lambda self: None
TypeRegulationsConstraint_swigregister = _pywrapcp.TypeRegulationsConstraint_swigregister
TypeRegulationsConstraint_swigregister(TypeRegulationsConstraint)

class RoutingDimension(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingDimension, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingDimension, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_RoutingDimension
    __del__ = lambda self: None

    def model(self):
        return _pywrapcp.RoutingDimension_model(self)

    def GetTransitValue(self, from_index, to_index, vehicle):
        return _pywrapcp.RoutingDimension_GetTransitValue(self, from_index, to_index, vehicle)

    def GetTransitValueFromClass(self, from_index, to_index, vehicle_class):
        return _pywrapcp.RoutingDimension_GetTransitValueFromClass(self, from_index, to_index, vehicle_class)

    def CumulVar(self, index):
        return _pywrapcp.RoutingDimension_CumulVar(self, index)

    def TransitVar(self, index):
        return _pywrapcp.RoutingDimension_TransitVar(self, index)

    def FixedTransitVar(self, index):
        return _pywrapcp.RoutingDimension_FixedTransitVar(self, index)

    def SlackVar(self, index):
        return _pywrapcp.RoutingDimension_SlackVar(self, index)

    def SetSpanUpperBoundForVehicle(self, upper_bound, vehicle):
        return _pywrapcp.RoutingDimension_SetSpanUpperBoundForVehicle(self, upper_bound, vehicle)

    def SetSpanCostCoefficientForVehicle(self, coefficient, vehicle):
        return _pywrapcp.RoutingDimension_SetSpanCostCoefficientForVehicle(self, coefficient, vehicle)

    def SetSpanCostCoefficientForAllVehicles(self, coefficient):
        return _pywrapcp.RoutingDimension_SetSpanCostCoefficientForAllVehicles(self, coefficient)

    def SetGlobalSpanCostCoefficient(self, coefficient):
        return _pywrapcp.RoutingDimension_SetGlobalSpanCostCoefficient(self, coefficient)

    def SetCumulVarSoftUpperBound(self, index, upper_bound, coefficient):
        return _pywrapcp.RoutingDimension_SetCumulVarSoftUpperBound(self, index, upper_bound, coefficient)

    def HasCumulVarSoftUpperBound(self, index):
        return _pywrapcp.RoutingDimension_HasCumulVarSoftUpperBound(self, index)

    def GetCumulVarSoftUpperBound(self, index):
        return _pywrapcp.RoutingDimension_GetCumulVarSoftUpperBound(self, index)

    def GetCumulVarSoftUpperBoundCoefficient(self, index):
        return _pywrapcp.RoutingDimension_GetCumulVarSoftUpperBoundCoefficient(self, index)

    def SetCumulVarSoftLowerBound(self, index, lower_bound, coefficient):
        return _pywrapcp.RoutingDimension_SetCumulVarSoftLowerBound(self, index, lower_bound, coefficient)

    def HasCumulVarSoftLowerBound(self, index):
        return _pywrapcp.RoutingDimension_HasCumulVarSoftLowerBound(self, index)

    def GetCumulVarSoftLowerBound(self, index):
        return _pywrapcp.RoutingDimension_GetCumulVarSoftLowerBound(self, index)

    def GetCumulVarSoftLowerBoundCoefficient(self, index):
        return _pywrapcp.RoutingDimension_GetCumulVarSoftLowerBoundCoefficient(self, index)

    def SetBreakIntervalsOfVehicle(self, breaks, vehicle, node_visit_transits):
        return _pywrapcp.RoutingDimension_SetBreakIntervalsOfVehicle(self, breaks, vehicle, node_visit_transits)

    def SetBreakDistanceDurationOfVehicle(self, distance, duration, vehicle):
        return _pywrapcp.RoutingDimension_SetBreakDistanceDurationOfVehicle(self, distance, duration, vehicle)

    def base_dimension(self):
        return _pywrapcp.RoutingDimension_base_dimension(self)

    def ShortestTransitionSlack(self, node):
        return _pywrapcp.RoutingDimension_ShortestTransitionSlack(self, node)

    def name(self):
        return _pywrapcp.RoutingDimension_name(self)

    def SetPickupToDeliveryLimitFunctionForPair(self, limit_function, pair_index):
        return _pywrapcp.RoutingDimension_SetPickupToDeliveryLimitFunctionForPair(self, limit_function, pair_index)

    def HasPickupToDeliveryLimits(self):
        return _pywrapcp.RoutingDimension_HasPickupToDeliveryLimits(self)

    def AddNodePrecedence(self, first_node, second_node, offset):
        return _pywrapcp.RoutingDimension_AddNodePrecedence(self, first_node, second_node, offset)

    def GetSpanUpperBoundForVehicle(self, vehicle):
        return _pywrapcp.RoutingDimension_GetSpanUpperBoundForVehicle(self, vehicle)

    def GetSpanCostCoefficientForVehicle(self, vehicle):
        return _pywrapcp.RoutingDimension_GetSpanCostCoefficientForVehicle(self, vehicle)

    def global_span_cost_coefficient(self):
        return _pywrapcp.RoutingDimension_global_span_cost_coefficient(self)

    def GetGroupDelay(self, vehicle, from_index, to_index):
        return _pywrapcp.RoutingDimension_GetGroupDelay(self, vehicle, from_index, to_index)

    def GetGlobalOptimizerOffset(self):
        return _pywrapcp.RoutingDimension_GetGlobalOptimizerOffset(self)

    def GetLocalOptimizerOffsetForVehicle(self, vehicle):
        return _pywrapcp.RoutingDimension_GetLocalOptimizerOffsetForVehicle(self, vehicle)
RoutingDimension_swigregister = _pywrapcp.RoutingDimension_swigregister
RoutingDimension_swigregister(RoutingDimension)


def MakeSetValuesFromTargets(solver, variables, targets):
    return _pywrapcp.MakeSetValuesFromTargets(solver, variables, targets)
MakeSetValuesFromTargets = _pywrapcp.MakeSetValuesFromTargets
class IntVarFilteredDecisionBuilder(DecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [DecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVarFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [DecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IntVarFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_IntVarFilteredDecisionBuilder
    __del__ = lambda self: None

    def NextWrapper(self, solver):
        return _pywrapcp.IntVarFilteredDecisionBuilder_NextWrapper(self, solver)

    def BuildSolution(self):
        return _pywrapcp.IntVarFilteredDecisionBuilder_BuildSolution(self)

    def number_of_decisions(self):
        return _pywrapcp.IntVarFilteredDecisionBuilder_number_of_decisions(self)

    def number_of_rejects(self):
        return _pywrapcp.IntVarFilteredDecisionBuilder_number_of_rejects(self)
IntVarFilteredDecisionBuilder_swigregister = _pywrapcp.IntVarFilteredDecisionBuilder_swigregister
IntVarFilteredDecisionBuilder_swigregister(IntVarFilteredDecisionBuilder)

class RoutingFilteredDecisionBuilder(IntVarFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [IntVarFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVarFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_RoutingFilteredDecisionBuilder
    __del__ = lambda self: None

    def model(self):
        return _pywrapcp.RoutingFilteredDecisionBuilder_model(self)

    def GetStartChainEnd(self, vehicle):
        return _pywrapcp.RoutingFilteredDecisionBuilder_GetStartChainEnd(self, vehicle)

    def GetEndChainStart(self, vehicle):
        return _pywrapcp.RoutingFilteredDecisionBuilder_GetEndChainStart(self, vehicle)

    def MakeDisjunctionNodesUnperformed(self, node):
        return _pywrapcp.RoutingFilteredDecisionBuilder_MakeDisjunctionNodesUnperformed(self, node)

    def MakeUnassignedNodesUnperformed(self):
        return _pywrapcp.RoutingFilteredDecisionBuilder_MakeUnassignedNodesUnperformed(self)
RoutingFilteredDecisionBuilder_swigregister = _pywrapcp.RoutingFilteredDecisionBuilder_swigregister
RoutingFilteredDecisionBuilder_swigregister(RoutingFilteredDecisionBuilder)

class CheapestInsertionFilteredDecisionBuilder(RoutingFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [RoutingFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheapestInsertionFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [RoutingFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheapestInsertionFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_CheapestInsertionFilteredDecisionBuilder
    __del__ = lambda self: None
CheapestInsertionFilteredDecisionBuilder_swigregister = _pywrapcp.CheapestInsertionFilteredDecisionBuilder_swigregister
CheapestInsertionFilteredDecisionBuilder_swigregister(CheapestInsertionFilteredDecisionBuilder)

class GlobalCheapestInsertionFilteredDecisionBuilder(CheapestInsertionFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [CheapestInsertionFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GlobalCheapestInsertionFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [CheapestInsertionFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, GlobalCheapestInsertionFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_GlobalCheapestInsertionFilteredDecisionBuilder
    __del__ = lambda self: None

    def BuildSolution(self):
        return _pywrapcp.GlobalCheapestInsertionFilteredDecisionBuilder_BuildSolution(self)

    def DebugString(self):
        return _pywrapcp.GlobalCheapestInsertionFilteredDecisionBuilder_DebugString(self)
GlobalCheapestInsertionFilteredDecisionBuilder_swigregister = _pywrapcp.GlobalCheapestInsertionFilteredDecisionBuilder_swigregister
GlobalCheapestInsertionFilteredDecisionBuilder_swigregister(GlobalCheapestInsertionFilteredDecisionBuilder)

class LocalCheapestInsertionFilteredDecisionBuilder(CheapestInsertionFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [CheapestInsertionFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocalCheapestInsertionFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [CheapestInsertionFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocalCheapestInsertionFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_LocalCheapestInsertionFilteredDecisionBuilder
    __del__ = lambda self: None

    def BuildSolution(self):
        return _pywrapcp.LocalCheapestInsertionFilteredDecisionBuilder_BuildSolution(self)

    def DebugString(self):
        return _pywrapcp.LocalCheapestInsertionFilteredDecisionBuilder_DebugString(self)
LocalCheapestInsertionFilteredDecisionBuilder_swigregister = _pywrapcp.LocalCheapestInsertionFilteredDecisionBuilder_swigregister
LocalCheapestInsertionFilteredDecisionBuilder_swigregister(LocalCheapestInsertionFilteredDecisionBuilder)

class CheapestAdditionFilteredDecisionBuilder(RoutingFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [RoutingFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CheapestAdditionFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [RoutingFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CheapestAdditionFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_CheapestAdditionFilteredDecisionBuilder
    __del__ = lambda self: None

    def BuildSolution(self):
        return _pywrapcp.CheapestAdditionFilteredDecisionBuilder_BuildSolution(self)
CheapestAdditionFilteredDecisionBuilder_swigregister = _pywrapcp.CheapestAdditionFilteredDecisionBuilder_swigregister
CheapestAdditionFilteredDecisionBuilder_swigregister(CheapestAdditionFilteredDecisionBuilder)

class EvaluatorCheapestAdditionFilteredDecisionBuilder(CheapestAdditionFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [CheapestAdditionFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EvaluatorCheapestAdditionFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [CheapestAdditionFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, EvaluatorCheapestAdditionFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_EvaluatorCheapestAdditionFilteredDecisionBuilder
    __del__ = lambda self: None

    def DebugString(self):
        return _pywrapcp.EvaluatorCheapestAdditionFilteredDecisionBuilder_DebugString(self)
EvaluatorCheapestAdditionFilteredDecisionBuilder_swigregister = _pywrapcp.EvaluatorCheapestAdditionFilteredDecisionBuilder_swigregister
EvaluatorCheapestAdditionFilteredDecisionBuilder_swigregister(EvaluatorCheapestAdditionFilteredDecisionBuilder)

class ComparatorCheapestAdditionFilteredDecisionBuilder(CheapestAdditionFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [CheapestAdditionFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComparatorCheapestAdditionFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [CheapestAdditionFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComparatorCheapestAdditionFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_ComparatorCheapestAdditionFilteredDecisionBuilder
    __del__ = lambda self: None

    def DebugString(self):
        return _pywrapcp.ComparatorCheapestAdditionFilteredDecisionBuilder_DebugString(self)
ComparatorCheapestAdditionFilteredDecisionBuilder_swigregister = _pywrapcp.ComparatorCheapestAdditionFilteredDecisionBuilder_swigregister
ComparatorCheapestAdditionFilteredDecisionBuilder_swigregister(ComparatorCheapestAdditionFilteredDecisionBuilder)

class SavingsFilteredDecisionBuilder(RoutingFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [RoutingFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SavingsFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [RoutingFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SavingsFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_SavingsFilteredDecisionBuilder
    __del__ = lambda self: None

    def BuildSolution(self):
        return _pywrapcp.SavingsFilteredDecisionBuilder_BuildSolution(self)
SavingsFilteredDecisionBuilder_swigregister = _pywrapcp.SavingsFilteredDecisionBuilder_swigregister
SavingsFilteredDecisionBuilder_swigregister(SavingsFilteredDecisionBuilder)

class SequentialSavingsFilteredDecisionBuilder(SavingsFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [SavingsFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SequentialSavingsFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [SavingsFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SequentialSavingsFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_SequentialSavingsFilteredDecisionBuilder
    __del__ = lambda self: None

    def DebugString(self):
        return _pywrapcp.SequentialSavingsFilteredDecisionBuilder_DebugString(self)
SequentialSavingsFilteredDecisionBuilder_swigregister = _pywrapcp.SequentialSavingsFilteredDecisionBuilder_swigregister
SequentialSavingsFilteredDecisionBuilder_swigregister(SequentialSavingsFilteredDecisionBuilder)

class ParallelSavingsFilteredDecisionBuilder(SavingsFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [SavingsFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParallelSavingsFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [SavingsFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParallelSavingsFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_ParallelSavingsFilteredDecisionBuilder
    __del__ = lambda self: None

    def DebugString(self):
        return _pywrapcp.ParallelSavingsFilteredDecisionBuilder_DebugString(self)
ParallelSavingsFilteredDecisionBuilder_swigregister = _pywrapcp.ParallelSavingsFilteredDecisionBuilder_swigregister
ParallelSavingsFilteredDecisionBuilder_swigregister(ParallelSavingsFilteredDecisionBuilder)

class ChristofidesFilteredDecisionBuilder(RoutingFilteredDecisionBuilder):
    __swig_setmethods__ = {}
    for _s in [RoutingFilteredDecisionBuilder]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChristofidesFilteredDecisionBuilder, name, value)
    __swig_getmethods__ = {}
    for _s in [RoutingFilteredDecisionBuilder]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChristofidesFilteredDecisionBuilder, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_ChristofidesFilteredDecisionBuilder
    __del__ = lambda self: None

    def BuildSolution(self):
        return _pywrapcp.ChristofidesFilteredDecisionBuilder_BuildSolution(self)

    def DebugString(self):
        return _pywrapcp.ChristofidesFilteredDecisionBuilder_DebugString(self)
ChristofidesFilteredDecisionBuilder_swigregister = _pywrapcp.ChristofidesFilteredDecisionBuilder_swigregister
ChristofidesFilteredDecisionBuilder_swigregister(ChristofidesFilteredDecisionBuilder)

class BasePathFilter(IntVarLocalSearchFilter):
    __swig_setmethods__ = {}
    for _s in [IntVarLocalSearchFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BasePathFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVarLocalSearchFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BasePathFilter, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pywrapcp.delete_BasePathFilter
    __del__ = lambda self: None

    def Accept(self, delta, deltadelta):
        return _pywrapcp.BasePathFilter_Accept(self, delta, deltadelta)

    def OnSynchronize(self, delta):
        return _pywrapcp.BasePathFilter_OnSynchronize(self, delta)
BasePathFilter_swigregister = _pywrapcp.BasePathFilter_swigregister
BasePathFilter_swigregister(BasePathFilter)

class CPFeasibilityFilter(IntVarLocalSearchFilter):
    __swig_setmethods__ = {}
    for _s in [IntVarLocalSearchFilter]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPFeasibilityFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [IntVarLocalSearchFilter]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CPFeasibilityFilter, name)
    __repr__ = _swig_repr

    def __init__(self, routing_model):
        this = _pywrapcp.new_CPFeasibilityFilter(routing_model)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pywrapcp.delete_CPFeasibilityFilter
    __del__ = lambda self: None

    def DebugString(self):
        return _pywrapcp.CPFeasibilityFilter_DebugString(self)

    def Accept(self, delta, deltadelta):
        return _pywrapcp.CPFeasibilityFilter_Accept(self, delta, deltadelta)

    def OnSynchronize(self, delta):
        return _pywrapcp.CPFeasibilityFilter_OnSynchronize(self, delta)
CPFeasibilityFilter_swigregister = _pywrapcp.CPFeasibilityFilter_swigregister
CPFeasibilityFilter_swigregister(CPFeasibilityFilter)

# This file is compatible with both classic and new-style classes.


